// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// Defines values for DogBreed.
const (
	Dingo     DogBreed = "Dingo"
	Husky     DogBreed = "Husky"
	Retriever DogBreed = "Retriever"
	Shepherd  DogBreed = "Shepherd"
)

// Defines values for OneOfComplexJSONBody0ExemptionReason.
const (
	LISTINGNOTTOURISTACCOMMODATION OneOfComplexJSONBody0ExemptionReason = "LISTING_NOT_TOURIST_ACCOMMODATION"
	LISTINGTYPENOTINCLUDED         OneOfComplexJSONBody0ExemptionReason = "LISTING_TYPE_NOT_INCLUDED"
)

// Defines values for OneOfComplexJSONBody0ExemptionRegistrationOwnership.
const (
	OneOfComplexJSONBody0ExemptionRegistrationOwnershipOWNER           OneOfComplexJSONBody0ExemptionRegistrationOwnership = "OWNER"
	OneOfComplexJSONBody0ExemptionRegistrationOwnershipPROPERTYMANAGER OneOfComplexJSONBody0ExemptionRegistrationOwnership = "PROPERTY_MANAGER"
)

// Defines values for OneOfComplexJSONBody0RegistrationRegistrationOwnership.
const (
	OneOfComplexJSONBody0RegistrationRegistrationOwnershipOWNER           OneOfComplexJSONBody0RegistrationRegistrationOwnership = "OWNER"
	OneOfComplexJSONBody0RegistrationRegistrationOwnershipPROPERTYMANAGER OneOfComplexJSONBody0RegistrationRegistrationOwnership = "PROPERTY_MANAGER"
)

// Defines values for OneOfComplexJSONBody1ExemptionExemptionReason.
const (
	OneOfComplexJSONBody1ExemptionExemptionReasonHotelMotel OneOfComplexJSONBody1ExemptionExemptionReason = "hotel_motel"
)

// Defines values for OneOfComplexJSONBody2ExemptionExemptionReason.
const (
	OneOfComplexJSONBody2ExemptionExemptionReasonBedBreakfastLodging   OneOfComplexJSONBody2ExemptionExemptionReason = "bed_breakfast_lodging"
	OneOfComplexJSONBody2ExemptionExemptionReasonHospitals             OneOfComplexJSONBody2ExemptionExemptionReason = "hospitals"
	OneOfComplexJSONBody2ExemptionExemptionReasonHotelMotel            OneOfComplexJSONBody2ExemptionExemptionReason = "hotel_motel"
	OneOfComplexJSONBody2ExemptionExemptionReasonInstitutionalBusiness OneOfComplexJSONBody2ExemptionExemptionReason = "institutional_business"
)

// Defines values for OneOfComplexJSONBody3ExemptionReason.
const (
	ListingIsSharedRoom    OneOfComplexJSONBody3ExemptionReason = "listing_is_shared_room"
	ListingNotFullBuilding OneOfComplexJSONBody3ExemptionReason = "listing_not_full_building"
	OtherExemptionReason   OneOfComplexJSONBody3ExemptionReason = "other_exemption_reason"
)

// Defines values for OneOfComplexJSONBody3ExemptionRegistrationOwnership.
const (
	OWNER           OneOfComplexJSONBody3ExemptionRegistrationOwnership = "OWNER"
	PROPERTYMANAGER OneOfComplexJSONBody3ExemptionRegistrationOwnership = "PROPERTY_MANAGER"
)

// Defines values for OneOfComplexJSONBody6CategorizationDataReportingStatus.
const (
	BusinessActivity OneOfComplexJSONBody6CategorizationDataReportingStatus = "business_activity"
	PrivateActivity  OneOfComplexJSONBody6CategorizationDataReportingStatus = "private_activity"
)

// Defines values for OneOfComplexJSONBody6CategorizationListingType.
const (
	HotelOrHostel     OneOfComplexJSONBody6CategorizationListingType = "hotel_or_hostel"
	Houseboat         OneOfComplexJSONBody6CategorizationListingType = "houseboat"
	MobileHome        OneOfComplexJSONBody6CategorizationListingType = "mobile_home"
	PrimaryResidence  OneOfComplexJSONBody6CategorizationListingType = "primary_residence"
	ServicedApartment OneOfComplexJSONBody6CategorizationListingType = "serviced_apartment"
	SummerHouse       OneOfComplexJSONBody6CategorizationListingType = "summer_house"
	Tent              OneOfComplexJSONBody6CategorizationListingType = "tent"
	Trailer           OneOfComplexJSONBody6CategorizationListingType = "trailer"
	TreeHouse         OneOfComplexJSONBody6CategorizationListingType = "tree_house"
)

// Cat defines model for Cat.
type Cat struct {
	Age     *int   `json:"age,omitempty"`
	Hunts   *bool  `json:"hunts,omitempty"`
	PetType string `json:"pet_type"`
}

// Dog defines model for Dog.
type Dog struct {
	Bark    *bool     `json:"bark,omitempty"`
	Breed   *DogBreed `json:"breed,omitempty"`
	PetType string    `json:"pet_type"`
}

// DogBreed defines model for Dog.Breed.
type DogBreed string

// Pet defines model for Pet.
type Pet struct {
	PetType string `json:"pet_type"`
}

// Object1 First type of object
type Object1 struct {
	A *string `json:"a,omitempty"`
	B *string `json:"b,omitempty"`
}

// Object2 Second type of object
type Object2 struct {
	C *string `json:"c,omitempty"`
	D *string `json:"d,omitempty"`
}

// String1 This is string one
type String1 = string

// String2 This is string two
type String2 = string

// NestedOneOfRef defines model for nested-one-of-ref.
type NestedOneOfRef struct {
	Config *NestedOneOfRef_Config `json:"config,omitempty"`
}

// AnyOfWithTypeJSONBody defines parameters for AnyOfWithType.
type AnyOfWithTypeJSONBody struct {
	Event *string `json:"event,omitempty"`
}

// AllOfObjectJSONBody defines parameters for AllOfObject.
type AllOfObjectJSONBody struct {
	A *string `json:"a,omitempty"`
	B *string `json:"b,omitempty"`
	C *string `json:"c,omitempty"`
	D *string `json:"d,omitempty"`
}

// AnyOfObjectJSONBody defines parameters for AnyOfObject.
type AnyOfObjectJSONBody struct {
	union json.RawMessage
}

// AnyOfObjectJSONBody0 defines parameters for AnyOfObject.
type AnyOfObjectJSONBody0 struct {
	A *string `json:"a,omitempty"`
	B *string `json:"b,omitempty"`
}

// AnyOfObjectJSONBody1 defines parameters for AnyOfObject.
type AnyOfObjectJSONBody1 struct {
	C *string `json:"c,omitempty"`
	D *string `json:"d,omitempty"`
}

// AnyOfPrimitiveJSONBody defines parameters for AnyOfPrimitive.
type AnyOfPrimitiveJSONBody struct {
	union json.RawMessage
}

// AnyOfPrimitiveJSONBody0 defines parameters for AnyOfPrimitive.
type AnyOfPrimitiveJSONBody0 = string

// AnyOfPrimitiveJSONBody1 defines parameters for AnyOfPrimitive.
type AnyOfPrimitiveJSONBody1 = int

// NestedOneOfObjectRefJSONBody defines parameters for NestedOneOfObjectRef.
type NestedOneOfObjectRefJSONBody struct {
	Config *NestedOneOfObjectRefJSONBody_Config `json:"config,omitempty"`
}

// NestedOneOfObjectRefJSONBody_Config defines parameters for NestedOneOfObjectRef.
type NestedOneOfObjectRefJSONBody_Config struct {
	union json.RawMessage
}

// NestedOneOfObjectWithNestedOneOfJSONBody defines parameters for NestedOneOfObjectWithNestedOneOf.
type NestedOneOfObjectWithNestedOneOfJSONBody struct {
	Config *NestedOneOfObjectWithNestedOneOfJSONBody_Config `json:"config,omitempty"`
}

// NestedOneOfObjectWithNestedOneOfJSONBodyConfig2 defines parameters for NestedOneOfObjectWithNestedOneOf.
type NestedOneOfObjectWithNestedOneOfJSONBodyConfig2 struct {
	union json.RawMessage
}

// NestedOneOfObjectWithNestedOneOfJSONBody_Config defines parameters for NestedOneOfObjectWithNestedOneOf.
type NestedOneOfObjectWithNestedOneOfJSONBody_Config struct {
	union json.RawMessage
}

// NestedOneOfRefJSONBody defines parameters for NestedOneOfRef.
type NestedOneOfRefJSONBody struct {
	Config *NestedOneOfRefJSONBody_Config `json:"config,omitempty"`
}

// NestedOneOfRefJSONBody_Config defines parameters for NestedOneOfRef.
type NestedOneOfRefJSONBody_Config struct {
	union json.RawMessage
}

// OneOfObjectJSONBody defines parameters for OneOfObject.
type OneOfObjectJSONBody struct {
	union json.RawMessage
}

// OneOfObjectJSONBody0 defines parameters for OneOfObject.
type OneOfObjectJSONBody0 struct {
	A *string `json:"a,omitempty"`
	B *string `json:"b,omitempty"`
}

// OneOfObjectJSONBody1 defines parameters for OneOfObject.
type OneOfObjectJSONBody1 struct {
	C *string `json:"c,omitempty"`
	D *string `json:"d,omitempty"`
}

// OneOfObjectRefJSONBody defines parameters for OneOfObjectRef.
type OneOfObjectRefJSONBody struct {
	union json.RawMessage
}

// OneOfPrimitiveJSONBody defines parameters for OneOfPrimitive.
type OneOfPrimitiveJSONBody struct {
	union json.RawMessage
}

// OneOfPrimitiveJSONBody0 defines parameters for OneOfPrimitive.
type OneOfPrimitiveJSONBody0 = string

// OneOfPrimitiveJSONBody1 defines parameters for OneOfPrimitive.
type OneOfPrimitiveJSONBody1 = int

// OneOfComplexJSONBody defines parameters for OneOfComplex.
type OneOfComplexJSONBody struct {
	union json.RawMessage
}

// OneOfComplexJSONBody0 defines parameters for OneOfComplex.
type OneOfComplexJSONBody0 struct {
	Exemption *struct {
		Email                 string                                              `json:"email"`
		FullName              string                                              `json:"full_name"`
		IdentificationNumber  string                                              `json:"identification_number"`
		Reason                OneOfComplexJSONBody0ExemptionReason                `json:"reason"`
		RegistrationOwnership OneOfComplexJSONBody0ExemptionRegistrationOwnership `json:"registration_ownership"`
	} `json:"exemption,omitempty"`
	ListingId    int `json:"listing_id"`
	Registration *struct {
		Email                 string                                                 `json:"email"`
		FullName              string                                                 `json:"full_name"`
		IdentificationNumber  string                                                 `json:"identification_number"`
		PermitNumber          string                                                 `json:"permit_number"`
		RegistrationOwnership OneOfComplexJSONBody0RegistrationRegistrationOwnership `json:"registration_ownership"`
	} `json:"registration,omitempty"`
	RegulatoryBody string `json:"regulatory_body"`
}

// OneOfComplexJSONBody0ExemptionReason defines parameters for OneOfComplex.
type OneOfComplexJSONBody0ExemptionReason string

// OneOfComplexJSONBody0ExemptionRegistrationOwnership defines parameters for OneOfComplex.
type OneOfComplexJSONBody0ExemptionRegistrationOwnership string

// OneOfComplexJSONBody0RegistrationRegistrationOwnership defines parameters for OneOfComplex.
type OneOfComplexJSONBody0RegistrationRegistrationOwnership string

// OneOfComplexJSONBody1 defines parameters for OneOfComplex.
type OneOfComplexJSONBody1 struct {
	Exemption *struct {
		AttestationExemptionClaim bool                                          `json:"attestation_exemption_claim"`
		Email                     string                                        `json:"email"`
		ExemptionReason           OneOfComplexJSONBody1ExemptionExemptionReason `json:"exemption_reason"`
		FullName                  string                                        `json:"full_name"`
	} `json:"exemption,omitempty"`
	ListingId    int `json:"listing_id"`
	Registration *struct {
		AttestationExistingRegistration bool   `json:"attestation_existing_registration"`
		Email                           string `json:"email"`
		ExpirationDate                  string `json:"expiration_date"`
		FullName                        string `json:"full_name"`
		ListingAddress                  string `json:"listing_address"`
		PermitNumber                    string `json:"permit_number"`
	} `json:"registration,omitempty"`
	RegulatoryBody string `json:"regulatory_body"`
}

// OneOfComplexJSONBody1ExemptionExemptionReason defines parameters for OneOfComplex.
type OneOfComplexJSONBody1ExemptionExemptionReason string

// OneOfComplexJSONBody2 defines parameters for OneOfComplex.
type OneOfComplexJSONBody2 struct {
	Exemption *struct {
		Attestation     bool                                          `json:"attestation"`
		ExemptionReason OneOfComplexJSONBody2ExemptionExemptionReason `json:"exemption_reason"`
		ListingAddress  string                                        `json:"listing_address"`
	} `json:"exemption,omitempty"`
	ListingId    int `json:"listing_id"`
	Registration *struct {
		Attestation    bool   `json:"attestation"`
		Email          string `json:"email"`
		FullName       string `json:"full_name"`
		ListingAddress string `json:"listing_address"`
		PermitNumber   string `json:"permit_number"`
	} `json:"registration,omitempty"`
	RegulatoryBody string `json:"regulatory_body"`
}

// OneOfComplexJSONBody2ExemptionExemptionReason defines parameters for OneOfComplex.
type OneOfComplexJSONBody2ExemptionExemptionReason string

// OneOfComplexJSONBody3 defines parameters for OneOfComplex.
type OneOfComplexJSONBody3 struct {
	Exemption *struct {
		Email                 string                                              `json:"email"`
		FullName              string                                              `json:"full_name"`
		IdentificationNumber  string                                              `json:"identification_number"`
		Reason                OneOfComplexJSONBody3ExemptionReason                `json:"reason"`
		RegistrationOwnership OneOfComplexJSONBody3ExemptionRegistrationOwnership `json:"registration_ownership"`
	} `json:"exemption,omitempty"`
	ListingId    int `json:"listing_id"`
	Registration *struct {
		Email                 string `json:"email"`
		FullName              string `json:"full_name"`
		IdentificationNumber  string `json:"identification_number"`
		PermitNumber          string `json:"permit_number"`
		RegistrationOwnership string `json:"registration_ownership"`
	} `json:"registration,omitempty"`
	RegulatoryBody string `json:"regulatory_body"`
}

// OneOfComplexJSONBody3ExemptionReason defines parameters for OneOfComplex.
type OneOfComplexJSONBody3ExemptionReason string

// OneOfComplexJSONBody3ExemptionRegistrationOwnership defines parameters for OneOfComplex.
type OneOfComplexJSONBody3ExemptionRegistrationOwnership string

// OneOfComplexJSONBody4 defines parameters for OneOfComplex.
type OneOfComplexJSONBody4 struct {
	ListingId    int `json:"listing_id"`
	Registration struct {
		PermitNumber string `json:"permit_number"`
	} `json:"registration"`
	RegulatoryBody string `json:"regulatory_body"`
}

// OneOfComplexJSONBody5 defines parameters for OneOfComplex.
type OneOfComplexJSONBody5 struct {
	Affiliation struct {
		AttestationEntrepreneur bool   `json:"attestation_entrepreneur"`
		ListingAddress          string `json:"listing_address"`
	} `json:"affiliation"`
	ListingId      int    `json:"listing_id"`
	RegulatoryBody string `json:"regulatory_body"`
}

// OneOfComplexJSONBody6 defines parameters for OneOfComplex.
type OneOfComplexJSONBody6 struct {
	Categorization struct {
		Attestation            *bool                                                   `json:"attestation,omitempty"`
		AttestationConditional *bool                                                   `json:"attestation_conditional,omitempty"`
		DataReportingBbr       *string                                                 `json:"data_reporting_bbr,omitempty"`
		DataReportingStatus    *OneOfComplexJSONBody6CategorizationDataReportingStatus `json:"data_reporting_status,omitempty"`
		ListingType            OneOfComplexJSONBody6CategorizationListingType          `json:"listing_type"`
	} `json:"categorization"`
	ListingId      int    `json:"listing_id"`
	RegulatoryBody string `json:"regulatory_body"`
}

// OneOfComplexJSONBody6CategorizationDataReportingStatus defines parameters for OneOfComplex.
type OneOfComplexJSONBody6CategorizationDataReportingStatus string

// OneOfComplexJSONBody6CategorizationListingType defines parameters for OneOfComplex.
type OneOfComplexJSONBody6CategorizationListingType string

// OneOfWithTypeJSONBody defines parameters for OneOfWithType.
type OneOfWithTypeJSONBody struct {
	Event *string `json:"event,omitempty"`
}

// OneOfRequestWithANestedAllOfJSONBody defines parameters for OneOfRequestWithANestedAllOf.
type OneOfRequestWithANestedAllOfJSONBody struct {
	union json.RawMessage
}

// AnyOfWithTypeJSONRequestBody defines body for AnyOfWithType for application/json ContentType.
type AnyOfWithTypeJSONRequestBody AnyOfWithTypeJSONBody

// AllOfObjectJSONRequestBody defines body for AllOfObject for application/json ContentType.
type AllOfObjectJSONRequestBody AllOfObjectJSONBody

// AnyOfObjectJSONRequestBody defines body for AnyOfObject for application/json ContentType.
type AnyOfObjectJSONRequestBody AnyOfObjectJSONBody

// AnyOfPrimitiveJSONRequestBody defines body for AnyOfPrimitive for application/json ContentType.
type AnyOfPrimitiveJSONRequestBody AnyOfPrimitiveJSONBody

// NestedOneOfObjectRefJSONRequestBody defines body for NestedOneOfObjectRef for application/json ContentType.
type NestedOneOfObjectRefJSONRequestBody NestedOneOfObjectRefJSONBody

// NestedOneOfObjectWithNestedOneOfJSONRequestBody defines body for NestedOneOfObjectWithNestedOneOf for application/json ContentType.
type NestedOneOfObjectWithNestedOneOfJSONRequestBody NestedOneOfObjectWithNestedOneOfJSONBody

// NestedOneOfRefJSONRequestBody defines body for NestedOneOfRef for application/json ContentType.
type NestedOneOfRefJSONRequestBody NestedOneOfRefJSONBody

// OneOfObjectJSONRequestBody defines body for OneOfObject for application/json ContentType.
type OneOfObjectJSONRequestBody OneOfObjectJSONBody

// OneOfObjectRefJSONRequestBody defines body for OneOfObjectRef for application/json ContentType.
type OneOfObjectRefJSONRequestBody OneOfObjectRefJSONBody

// OneOfPrimitiveJSONRequestBody defines body for OneOfPrimitive for application/json ContentType.
type OneOfPrimitiveJSONRequestBody OneOfPrimitiveJSONBody

// OneOfComplexJSONRequestBody defines body for OneOfComplex for application/json ContentType.
type OneOfComplexJSONRequestBody OneOfComplexJSONBody

// OneOfWithTypeJSONRequestBody defines body for OneOfWithType for application/json ContentType.
type OneOfWithTypeJSONRequestBody OneOfWithTypeJSONBody

// OneOfRequestWithANestedAllOfJSONRequestBody defines body for OneOfRequestWithANestedAllOf for application/json ContentType.
type OneOfRequestWithANestedAllOfJSONRequestBody OneOfRequestWithANestedAllOfJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AnyOfWithTypeWithBody request with any body
	AnyOfWithTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AnyOfWithType(ctx context.Context, body AnyOfWithTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllOfObjectWithBody request with any body
	AllOfObjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AllOfObject(ctx context.Context, body AllOfObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AnyOfObjectWithBody request with any body
	AnyOfObjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AnyOfObject(ctx context.Context, body AnyOfObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AnyOfPrimitiveWithBody request with any body
	AnyOfPrimitiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AnyOfPrimitive(ctx context.Context, body AnyOfPrimitiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NestedOneOfObjectRefWithBody request with any body
	NestedOneOfObjectRefWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NestedOneOfObjectRef(ctx context.Context, body NestedOneOfObjectRefJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NestedOneOfObjectWithNestedOneOfWithBody request with any body
	NestedOneOfObjectWithNestedOneOfWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NestedOneOfObjectWithNestedOneOf(ctx context.Context, body NestedOneOfObjectWithNestedOneOfJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NestedOneOfRefWithBody request with any body
	NestedOneOfRefWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NestedOneOfRef(ctx context.Context, body NestedOneOfRefJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OneOfObjectWithBody request with any body
	OneOfObjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OneOfObject(ctx context.Context, body OneOfObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OneOfObjectRefWithBody request with any body
	OneOfObjectRefWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OneOfObjectRef(ctx context.Context, body OneOfObjectRefJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OneOfPrimitiveWithBody request with any body
	OneOfPrimitiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OneOfPrimitive(ctx context.Context, body OneOfPrimitiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OneOfComplexWithBody request with any body
	OneOfComplexWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OneOfComplex(ctx context.Context, body OneOfComplexJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OneOfWithTypeWithBody request with any body
	OneOfWithTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OneOfWithType(ctx context.Context, body OneOfWithTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OneOfRequestWithANestedAllOfWithBody request with any body
	OneOfRequestWithANestedAllOfWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OneOfRequestWithANestedAllOf(ctx context.Context, body OneOfRequestWithANestedAllOfJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AnyOfWithTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAnyOfWithTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AnyOfWithType(ctx context.Context, body AnyOfWithTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAnyOfWithTypeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllOfObjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllOfObjectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllOfObject(ctx context.Context, body AllOfObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllOfObjectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AnyOfObjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAnyOfObjectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AnyOfObject(ctx context.Context, body AnyOfObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAnyOfObjectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AnyOfPrimitiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAnyOfPrimitiveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AnyOfPrimitive(ctx context.Context, body AnyOfPrimitiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAnyOfPrimitiveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NestedOneOfObjectRefWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNestedOneOfObjectRefRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NestedOneOfObjectRef(ctx context.Context, body NestedOneOfObjectRefJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNestedOneOfObjectRefRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NestedOneOfObjectWithNestedOneOfWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNestedOneOfObjectWithNestedOneOfRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NestedOneOfObjectWithNestedOneOf(ctx context.Context, body NestedOneOfObjectWithNestedOneOfJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNestedOneOfObjectWithNestedOneOfRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NestedOneOfRefWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNestedOneOfRefRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NestedOneOfRef(ctx context.Context, body NestedOneOfRefJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNestedOneOfRefRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneOfObjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneOfObjectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneOfObject(ctx context.Context, body OneOfObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneOfObjectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneOfObjectRefWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneOfObjectRefRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneOfObjectRef(ctx context.Context, body OneOfObjectRefJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneOfObjectRefRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneOfPrimitiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneOfPrimitiveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneOfPrimitive(ctx context.Context, body OneOfPrimitiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneOfPrimitiveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneOfComplexWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneOfComplexRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneOfComplex(ctx context.Context, body OneOfComplexJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneOfComplexRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneOfWithTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneOfWithTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneOfWithType(ctx context.Context, body OneOfWithTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneOfWithTypeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneOfRequestWithANestedAllOfWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneOfRequestWithANestedAllOfRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneOfRequestWithANestedAllOf(ctx context.Context, body OneOfRequestWithANestedAllOfJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneOfRequestWithANestedAllOfRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAnyOfWithTypeRequest calls the generic AnyOfWithType builder with application/json body
func NewAnyOfWithTypeRequest(server string, body AnyOfWithTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAnyOfWithTypeRequestWithBody(server, "application/json", bodyReader)
}

// NewAnyOfWithTypeRequestWithBody generates requests for AnyOfWithType with any type of body
func NewAnyOfWithTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/any-of-with-type")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAllOfObjectRequest calls the generic AllOfObject builder with application/json body
func NewAllOfObjectRequest(server string, body AllOfObjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAllOfObjectRequestWithBody(server, "application/json", bodyReader)
}

// NewAllOfObjectRequestWithBody generates requests for AllOfObject with any type of body
func NewAllOfObjectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anything/all-of-object")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAnyOfObjectRequest calls the generic AnyOfObject builder with application/json body
func NewAnyOfObjectRequest(server string, body AnyOfObjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAnyOfObjectRequestWithBody(server, "application/json", bodyReader)
}

// NewAnyOfObjectRequestWithBody generates requests for AnyOfObject with any type of body
func NewAnyOfObjectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anything/any-of-object")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAnyOfPrimitiveRequest calls the generic AnyOfPrimitive builder with application/json body
func NewAnyOfPrimitiveRequest(server string, body AnyOfPrimitiveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAnyOfPrimitiveRequestWithBody(server, "application/json", bodyReader)
}

// NewAnyOfPrimitiveRequestWithBody generates requests for AnyOfPrimitive with any type of body
func NewAnyOfPrimitiveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anything/any-of-primitive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNestedOneOfObjectRefRequest calls the generic NestedOneOfObjectRef builder with application/json body
func NewNestedOneOfObjectRefRequest(server string, body NestedOneOfObjectRefJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNestedOneOfObjectRefRequestWithBody(server, "application/json", bodyReader)
}

// NewNestedOneOfObjectRefRequestWithBody generates requests for NestedOneOfObjectRef with any type of body
func NewNestedOneOfObjectRefRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anything/nested-one-of-object-ref")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNestedOneOfObjectWithNestedOneOfRequest calls the generic NestedOneOfObjectWithNestedOneOf builder with application/json body
func NewNestedOneOfObjectWithNestedOneOfRequest(server string, body NestedOneOfObjectWithNestedOneOfJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNestedOneOfObjectWithNestedOneOfRequestWithBody(server, "application/json", bodyReader)
}

// NewNestedOneOfObjectWithNestedOneOfRequestWithBody generates requests for NestedOneOfObjectWithNestedOneOf with any type of body
func NewNestedOneOfObjectWithNestedOneOfRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anything/nested-one-of-object-with-nested-one-of")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNestedOneOfRefRequest calls the generic NestedOneOfRef builder with application/json body
func NewNestedOneOfRefRequest(server string, body NestedOneOfRefJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNestedOneOfRefRequestWithBody(server, "application/json", bodyReader)
}

// NewNestedOneOfRefRequestWithBody generates requests for NestedOneOfRef with any type of body
func NewNestedOneOfRefRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anything/nested-one-of-ref")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOneOfObjectRequest calls the generic OneOfObject builder with application/json body
func NewOneOfObjectRequest(server string, body OneOfObjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOneOfObjectRequestWithBody(server, "application/json", bodyReader)
}

// NewOneOfObjectRequestWithBody generates requests for OneOfObject with any type of body
func NewOneOfObjectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anything/one-of-object")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOneOfObjectRefRequest calls the generic OneOfObjectRef builder with application/json body
func NewOneOfObjectRefRequest(server string, body OneOfObjectRefJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOneOfObjectRefRequestWithBody(server, "application/json", bodyReader)
}

// NewOneOfObjectRefRequestWithBody generates requests for OneOfObjectRef with any type of body
func NewOneOfObjectRefRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anything/one-of-object-ref")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOneOfPrimitiveRequest calls the generic OneOfPrimitive builder with application/json body
func NewOneOfPrimitiveRequest(server string, body OneOfPrimitiveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOneOfPrimitiveRequestWithBody(server, "application/json", bodyReader)
}

// NewOneOfPrimitiveRequestWithBody generates requests for OneOfPrimitive with any type of body
func NewOneOfPrimitiveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anything/one-of-primitive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOneOfComplexRequest calls the generic OneOfComplex builder with application/json body
func NewOneOfComplexRequest(server string, body OneOfComplexJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOneOfComplexRequestWithBody(server, "application/json", bodyReader)
}

// NewOneOfComplexRequestWithBody generates requests for OneOfComplex with any type of body
func NewOneOfComplexRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/one-of-complex")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOneOfWithTypeRequest calls the generic OneOfWithType builder with application/json body
func NewOneOfWithTypeRequest(server string, body OneOfWithTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOneOfWithTypeRequestWithBody(server, "application/json", bodyReader)
}

// NewOneOfWithTypeRequestWithBody generates requests for OneOfWithType with any type of body
func NewOneOfWithTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/one-of-with-type")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOneOfRequestWithANestedAllOfRequest calls the generic OneOfRequestWithANestedAllOf builder with application/json body
func NewOneOfRequestWithANestedAllOfRequest(server string, body OneOfRequestWithANestedAllOfJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOneOfRequestWithANestedAllOfRequestWithBody(server, "application/json", bodyReader)
}

// NewOneOfRequestWithANestedAllOfRequestWithBody generates requests for OneOfRequestWithANestedAllOf with any type of body
func NewOneOfRequestWithANestedAllOfRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AnyOfWithTypeWithBodyWithResponse request with any body
	AnyOfWithTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AnyOfWithTypeResponse, error)

	AnyOfWithTypeWithResponse(ctx context.Context, body AnyOfWithTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*AnyOfWithTypeResponse, error)

	// AllOfObjectWithBodyWithResponse request with any body
	AllOfObjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AllOfObjectResponse, error)

	AllOfObjectWithResponse(ctx context.Context, body AllOfObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*AllOfObjectResponse, error)

	// AnyOfObjectWithBodyWithResponse request with any body
	AnyOfObjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AnyOfObjectResponse, error)

	AnyOfObjectWithResponse(ctx context.Context, body AnyOfObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*AnyOfObjectResponse, error)

	// AnyOfPrimitiveWithBodyWithResponse request with any body
	AnyOfPrimitiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AnyOfPrimitiveResponse, error)

	AnyOfPrimitiveWithResponse(ctx context.Context, body AnyOfPrimitiveJSONRequestBody, reqEditors ...RequestEditorFn) (*AnyOfPrimitiveResponse, error)

	// NestedOneOfObjectRefWithBodyWithResponse request with any body
	NestedOneOfObjectRefWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NestedOneOfObjectRefResponse, error)

	NestedOneOfObjectRefWithResponse(ctx context.Context, body NestedOneOfObjectRefJSONRequestBody, reqEditors ...RequestEditorFn) (*NestedOneOfObjectRefResponse, error)

	// NestedOneOfObjectWithNestedOneOfWithBodyWithResponse request with any body
	NestedOneOfObjectWithNestedOneOfWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NestedOneOfObjectWithNestedOneOfResponse, error)

	NestedOneOfObjectWithNestedOneOfWithResponse(ctx context.Context, body NestedOneOfObjectWithNestedOneOfJSONRequestBody, reqEditors ...RequestEditorFn) (*NestedOneOfObjectWithNestedOneOfResponse, error)

	// NestedOneOfRefWithBodyWithResponse request with any body
	NestedOneOfRefWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NestedOneOfRefResponse, error)

	NestedOneOfRefWithResponse(ctx context.Context, body NestedOneOfRefJSONRequestBody, reqEditors ...RequestEditorFn) (*NestedOneOfRefResponse, error)

	// OneOfObjectWithBodyWithResponse request with any body
	OneOfObjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OneOfObjectResponse, error)

	OneOfObjectWithResponse(ctx context.Context, body OneOfObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*OneOfObjectResponse, error)

	// OneOfObjectRefWithBodyWithResponse request with any body
	OneOfObjectRefWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OneOfObjectRefResponse, error)

	OneOfObjectRefWithResponse(ctx context.Context, body OneOfObjectRefJSONRequestBody, reqEditors ...RequestEditorFn) (*OneOfObjectRefResponse, error)

	// OneOfPrimitiveWithBodyWithResponse request with any body
	OneOfPrimitiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OneOfPrimitiveResponse, error)

	OneOfPrimitiveWithResponse(ctx context.Context, body OneOfPrimitiveJSONRequestBody, reqEditors ...RequestEditorFn) (*OneOfPrimitiveResponse, error)

	// OneOfComplexWithBodyWithResponse request with any body
	OneOfComplexWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OneOfComplexResponse, error)

	OneOfComplexWithResponse(ctx context.Context, body OneOfComplexJSONRequestBody, reqEditors ...RequestEditorFn) (*OneOfComplexResponse, error)

	// OneOfWithTypeWithBodyWithResponse request with any body
	OneOfWithTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OneOfWithTypeResponse, error)

	OneOfWithTypeWithResponse(ctx context.Context, body OneOfWithTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*OneOfWithTypeResponse, error)

	// OneOfRequestWithANestedAllOfWithBodyWithResponse request with any body
	OneOfRequestWithANestedAllOfWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OneOfRequestWithANestedAllOfResponse, error)

	OneOfRequestWithANestedAllOfWithResponse(ctx context.Context, body OneOfRequestWithANestedAllOfJSONRequestBody, reqEditors ...RequestEditorFn) (*OneOfRequestWithANestedAllOfResponse, error)
}

type AnyOfWithTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AnyOfWithTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AnyOfWithTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllOfObjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AllOfObjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllOfObjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AnyOfObjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AnyOfObjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AnyOfObjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AnyOfPrimitiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AnyOfPrimitiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AnyOfPrimitiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NestedOneOfObjectRefResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r NestedOneOfObjectRefResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NestedOneOfObjectRefResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NestedOneOfObjectWithNestedOneOfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r NestedOneOfObjectWithNestedOneOfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NestedOneOfObjectWithNestedOneOfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NestedOneOfRefResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r NestedOneOfRefResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NestedOneOfRefResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OneOfObjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OneOfObjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OneOfObjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OneOfObjectRefResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OneOfObjectRefResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OneOfObjectRefResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OneOfPrimitiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OneOfPrimitiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OneOfPrimitiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OneOfComplexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OneOfComplexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OneOfComplexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OneOfWithTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OneOfWithTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OneOfWithTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OneOfRequestWithANestedAllOfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OneOfRequestWithANestedAllOfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OneOfRequestWithANestedAllOfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AnyOfWithTypeWithBodyWithResponse request with arbitrary body returning *AnyOfWithTypeResponse
func (c *ClientWithResponses) AnyOfWithTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AnyOfWithTypeResponse, error) {
	rsp, err := c.AnyOfWithTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAnyOfWithTypeResponse(rsp)
}

func (c *ClientWithResponses) AnyOfWithTypeWithResponse(ctx context.Context, body AnyOfWithTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*AnyOfWithTypeResponse, error) {
	rsp, err := c.AnyOfWithType(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAnyOfWithTypeResponse(rsp)
}

// AllOfObjectWithBodyWithResponse request with arbitrary body returning *AllOfObjectResponse
func (c *ClientWithResponses) AllOfObjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AllOfObjectResponse, error) {
	rsp, err := c.AllOfObjectWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllOfObjectResponse(rsp)
}

func (c *ClientWithResponses) AllOfObjectWithResponse(ctx context.Context, body AllOfObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*AllOfObjectResponse, error) {
	rsp, err := c.AllOfObject(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllOfObjectResponse(rsp)
}

// AnyOfObjectWithBodyWithResponse request with arbitrary body returning *AnyOfObjectResponse
func (c *ClientWithResponses) AnyOfObjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AnyOfObjectResponse, error) {
	rsp, err := c.AnyOfObjectWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAnyOfObjectResponse(rsp)
}

func (c *ClientWithResponses) AnyOfObjectWithResponse(ctx context.Context, body AnyOfObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*AnyOfObjectResponse, error) {
	rsp, err := c.AnyOfObject(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAnyOfObjectResponse(rsp)
}

// AnyOfPrimitiveWithBodyWithResponse request with arbitrary body returning *AnyOfPrimitiveResponse
func (c *ClientWithResponses) AnyOfPrimitiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AnyOfPrimitiveResponse, error) {
	rsp, err := c.AnyOfPrimitiveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAnyOfPrimitiveResponse(rsp)
}

func (c *ClientWithResponses) AnyOfPrimitiveWithResponse(ctx context.Context, body AnyOfPrimitiveJSONRequestBody, reqEditors ...RequestEditorFn) (*AnyOfPrimitiveResponse, error) {
	rsp, err := c.AnyOfPrimitive(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAnyOfPrimitiveResponse(rsp)
}

// NestedOneOfObjectRefWithBodyWithResponse request with arbitrary body returning *NestedOneOfObjectRefResponse
func (c *ClientWithResponses) NestedOneOfObjectRefWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NestedOneOfObjectRefResponse, error) {
	rsp, err := c.NestedOneOfObjectRefWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNestedOneOfObjectRefResponse(rsp)
}

func (c *ClientWithResponses) NestedOneOfObjectRefWithResponse(ctx context.Context, body NestedOneOfObjectRefJSONRequestBody, reqEditors ...RequestEditorFn) (*NestedOneOfObjectRefResponse, error) {
	rsp, err := c.NestedOneOfObjectRef(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNestedOneOfObjectRefResponse(rsp)
}

// NestedOneOfObjectWithNestedOneOfWithBodyWithResponse request with arbitrary body returning *NestedOneOfObjectWithNestedOneOfResponse
func (c *ClientWithResponses) NestedOneOfObjectWithNestedOneOfWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NestedOneOfObjectWithNestedOneOfResponse, error) {
	rsp, err := c.NestedOneOfObjectWithNestedOneOfWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNestedOneOfObjectWithNestedOneOfResponse(rsp)
}

func (c *ClientWithResponses) NestedOneOfObjectWithNestedOneOfWithResponse(ctx context.Context, body NestedOneOfObjectWithNestedOneOfJSONRequestBody, reqEditors ...RequestEditorFn) (*NestedOneOfObjectWithNestedOneOfResponse, error) {
	rsp, err := c.NestedOneOfObjectWithNestedOneOf(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNestedOneOfObjectWithNestedOneOfResponse(rsp)
}

// NestedOneOfRefWithBodyWithResponse request with arbitrary body returning *NestedOneOfRefResponse
func (c *ClientWithResponses) NestedOneOfRefWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NestedOneOfRefResponse, error) {
	rsp, err := c.NestedOneOfRefWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNestedOneOfRefResponse(rsp)
}

func (c *ClientWithResponses) NestedOneOfRefWithResponse(ctx context.Context, body NestedOneOfRefJSONRequestBody, reqEditors ...RequestEditorFn) (*NestedOneOfRefResponse, error) {
	rsp, err := c.NestedOneOfRef(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNestedOneOfRefResponse(rsp)
}

// OneOfObjectWithBodyWithResponse request with arbitrary body returning *OneOfObjectResponse
func (c *ClientWithResponses) OneOfObjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OneOfObjectResponse, error) {
	rsp, err := c.OneOfObjectWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneOfObjectResponse(rsp)
}

func (c *ClientWithResponses) OneOfObjectWithResponse(ctx context.Context, body OneOfObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*OneOfObjectResponse, error) {
	rsp, err := c.OneOfObject(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneOfObjectResponse(rsp)
}

// OneOfObjectRefWithBodyWithResponse request with arbitrary body returning *OneOfObjectRefResponse
func (c *ClientWithResponses) OneOfObjectRefWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OneOfObjectRefResponse, error) {
	rsp, err := c.OneOfObjectRefWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneOfObjectRefResponse(rsp)
}

func (c *ClientWithResponses) OneOfObjectRefWithResponse(ctx context.Context, body OneOfObjectRefJSONRequestBody, reqEditors ...RequestEditorFn) (*OneOfObjectRefResponse, error) {
	rsp, err := c.OneOfObjectRef(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneOfObjectRefResponse(rsp)
}

// OneOfPrimitiveWithBodyWithResponse request with arbitrary body returning *OneOfPrimitiveResponse
func (c *ClientWithResponses) OneOfPrimitiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OneOfPrimitiveResponse, error) {
	rsp, err := c.OneOfPrimitiveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneOfPrimitiveResponse(rsp)
}

func (c *ClientWithResponses) OneOfPrimitiveWithResponse(ctx context.Context, body OneOfPrimitiveJSONRequestBody, reqEditors ...RequestEditorFn) (*OneOfPrimitiveResponse, error) {
	rsp, err := c.OneOfPrimitive(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneOfPrimitiveResponse(rsp)
}

// OneOfComplexWithBodyWithResponse request with arbitrary body returning *OneOfComplexResponse
func (c *ClientWithResponses) OneOfComplexWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OneOfComplexResponse, error) {
	rsp, err := c.OneOfComplexWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneOfComplexResponse(rsp)
}

func (c *ClientWithResponses) OneOfComplexWithResponse(ctx context.Context, body OneOfComplexJSONRequestBody, reqEditors ...RequestEditorFn) (*OneOfComplexResponse, error) {
	rsp, err := c.OneOfComplex(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneOfComplexResponse(rsp)
}

// OneOfWithTypeWithBodyWithResponse request with arbitrary body returning *OneOfWithTypeResponse
func (c *ClientWithResponses) OneOfWithTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OneOfWithTypeResponse, error) {
	rsp, err := c.OneOfWithTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneOfWithTypeResponse(rsp)
}

func (c *ClientWithResponses) OneOfWithTypeWithResponse(ctx context.Context, body OneOfWithTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*OneOfWithTypeResponse, error) {
	rsp, err := c.OneOfWithType(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneOfWithTypeResponse(rsp)
}

// OneOfRequestWithANestedAllOfWithBodyWithResponse request with arbitrary body returning *OneOfRequestWithANestedAllOfResponse
func (c *ClientWithResponses) OneOfRequestWithANestedAllOfWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OneOfRequestWithANestedAllOfResponse, error) {
	rsp, err := c.OneOfRequestWithANestedAllOfWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneOfRequestWithANestedAllOfResponse(rsp)
}

func (c *ClientWithResponses) OneOfRequestWithANestedAllOfWithResponse(ctx context.Context, body OneOfRequestWithANestedAllOfJSONRequestBody, reqEditors ...RequestEditorFn) (*OneOfRequestWithANestedAllOfResponse, error) {
	rsp, err := c.OneOfRequestWithANestedAllOf(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneOfRequestWithANestedAllOfResponse(rsp)
}

// ParseAnyOfWithTypeResponse parses an HTTP response from a AnyOfWithTypeWithResponse call
func ParseAnyOfWithTypeResponse(rsp *http.Response) (*AnyOfWithTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AnyOfWithTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAllOfObjectResponse parses an HTTP response from a AllOfObjectWithResponse call
func ParseAllOfObjectResponse(rsp *http.Response) (*AllOfObjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllOfObjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAnyOfObjectResponse parses an HTTP response from a AnyOfObjectWithResponse call
func ParseAnyOfObjectResponse(rsp *http.Response) (*AnyOfObjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AnyOfObjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAnyOfPrimitiveResponse parses an HTTP response from a AnyOfPrimitiveWithResponse call
func ParseAnyOfPrimitiveResponse(rsp *http.Response) (*AnyOfPrimitiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AnyOfPrimitiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseNestedOneOfObjectRefResponse parses an HTTP response from a NestedOneOfObjectRefWithResponse call
func ParseNestedOneOfObjectRefResponse(rsp *http.Response) (*NestedOneOfObjectRefResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NestedOneOfObjectRefResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseNestedOneOfObjectWithNestedOneOfResponse parses an HTTP response from a NestedOneOfObjectWithNestedOneOfWithResponse call
func ParseNestedOneOfObjectWithNestedOneOfResponse(rsp *http.Response) (*NestedOneOfObjectWithNestedOneOfResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NestedOneOfObjectWithNestedOneOfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseNestedOneOfRefResponse parses an HTTP response from a NestedOneOfRefWithResponse call
func ParseNestedOneOfRefResponse(rsp *http.Response) (*NestedOneOfRefResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NestedOneOfRefResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOneOfObjectResponse parses an HTTP response from a OneOfObjectWithResponse call
func ParseOneOfObjectResponse(rsp *http.Response) (*OneOfObjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OneOfObjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOneOfObjectRefResponse parses an HTTP response from a OneOfObjectRefWithResponse call
func ParseOneOfObjectRefResponse(rsp *http.Response) (*OneOfObjectRefResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OneOfObjectRefResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOneOfPrimitiveResponse parses an HTTP response from a OneOfPrimitiveWithResponse call
func ParseOneOfPrimitiveResponse(rsp *http.Response) (*OneOfPrimitiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OneOfPrimitiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOneOfComplexResponse parses an HTTP response from a OneOfComplexWithResponse call
func ParseOneOfComplexResponse(rsp *http.Response) (*OneOfComplexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OneOfComplexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOneOfWithTypeResponse parses an HTTP response from a OneOfWithTypeWithResponse call
func ParseOneOfWithTypeResponse(rsp *http.Response) (*OneOfWithTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OneOfWithTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOneOfRequestWithANestedAllOfResponse parses an HTTP response from a OneOfRequestWithANestedAllOfWithResponse call
func ParseOneOfRequestWithANestedAllOfResponse(rsp *http.Response) (*OneOfRequestWithANestedAllOfResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OneOfRequestWithANestedAllOfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
