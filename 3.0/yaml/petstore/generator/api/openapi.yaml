openapi: 3.0.0
info:
  contact:
    email: apiteam@swagger.io
  description: "This is a sample server Petstore server.  You can find out more about\
    \ Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\
    \  For this sample, you can use the api key `special-key` to test the authorization\
    \ filters."
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Petstore
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: http://petstore.swagger.io/v2
tags:
- description: Everything about your Pets
  externalDocs:
    description: Find out more
    url: http://swagger.io
  name: pet
- description: Access to Petstore orders
  name: store
- description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
  name: user
paths:
  /pet:
    post:
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        $ref: '#/components/requestBodies/Pet'
      responses:
        "200":
          description: Added a new pet to the store
        "405":
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Add a new pet to the store
      tags:
      - pet
    put:
      description: Updating an existing pet
      operationId: updatePet
      requestBody:
        $ref: '#/components/requestBodies/Pet'
      responses:
        "200":
          description: Updating pet
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Update an existing pet
      tags:
      - pet
  /pet/findByStatus:
    get:
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
      - description: Status values that need to be considered for filter
        explode: true
        in: query
        name: status
        required: true
        schema:
          items:
            default: available
            enum:
            - available
            - pending
            - sold
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Pet'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pet'
                type: array
          description: successful operation
        "400":
          description: Invalid status value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Finds Pets by status
      tags:
      - pet
  /pet/findByTags:
    get:
      deprecated: true
      description: "Muliple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing."
      operationId: findPetsByTags
      parameters:
      - description: Tags to filter by
        explode: true
        in: query
        name: tags
        required: true
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Pet'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pet'
                type: array
          description: successful operation
        "400":
          description: Invalid tag value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Finds Pets by tags
      tags:
      - pet
  /pet/{petId}:
    delete:
      description: ""
      operationId: deletePet
      parameters:
      - explode: false
        in: header
        name: api_key
        required: false
        schema:
          type: string
        style: simple
      - description: Pet id to delete
        explode: false
        in: path
        name: petId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Deletes a pet
      tags:
      - pet
    get:
      description: Returns a single pet
      operationId: getPetById
      parameters:
      - description: ID of pet to return
        explode: false
        in: path
        name: petId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        default:
          description: successful response
      security:
      - api_key: []
      summary: Find pet by ID
      tags:
      - pet
    post:
      description: Updating a pet in the store with form data
      operationId: updatePetWithForm
      parameters:
      - description: ID of pet that needs to be updated
        explode: false
        in: path
        name: petId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/updatePetWithForm_request'
      responses:
        "405":
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Updates a pet in the store with form data
      tags:
      - pet
  /pet/{petId}/uploadImage:
    post:
      description: ""
      operationId: uploadFile
      parameters:
      - description: ID of pet to update
        explode: false
        in: path
        name: petId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/uploadFile_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Uploads an image
      tags:
      - pet
  /store/inventory:
    get:
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int32
                  type: integer
                type: object
          description: successful operation
      security:
      - api_key: []
      summary: Returns pet inventories by status
      tags:
      - store
  /store/order:
    post:
      description: ""
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the pet
        required: true
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: successful operation
        "400":
          description: Invalid Order
      summary: Place an order for a pet
      tags:
      - store
  /store/order/{orderId}:
    delete:
      description: For valid response try integer IDs with positive integer value.
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
      - description: ID of the order that needs to be deleted
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
        style: simple
      responses:
        "200":
          description: Order has been successful
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      summary: Delete purchase order by ID
      tags:
      - store
    get:
      description: For valid response try integer IDs with value >= 1 and <= 10. Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
      - description: ID of pet that needs to be fetched
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          format: int64
          maximum: 10
          minimum: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      summary: Find purchase order by ID
      tags:
      - store
  /user:
    post:
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
      responses:
        default:
          description: successful operation
      summary: Create user
      tags:
      - user
  /user/createWithArray:
    post:
      description: ""
      operationId: createUsersWithArrayInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
      summary: Creates list of users with given input array
      tags:
      - user
  /user/createWithList:
    post:
      description: ""
      operationId: createUsersWithListInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
      summary: Creates list of users with given input array
      tags:
      - user
  /user/login:
    get:
      description: ""
      operationId: loginUser
      parameters:
      - description: The user name for login
        explode: true
        in: query
        name: username
        required: true
        schema:
          type: string
        style: form
      - description: The password for login in clear text
        explode: true
        in: query
        name: password
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              explode: false
              schema:
                format: int32
                type: integer
              style: simple
            X-Expires-After:
              description: date in UTC when token expires
              explode: false
              schema:
                format: date-time
                type: string
              style: simple
        "400":
          description: Invalid username/password supplied
      summary: Logs user into the system
      tags:
      - user
  /user/logout:
    get:
      description: ""
      operationId: logoutUser
      responses:
        default:
          description: successful operation
      summary: Logs out current logged in user session
      tags:
      - user
  /user/{username}:
    delete:
      description: Deletion can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - description: The name that needs to be deleted
        explode: false
        in: path
        name: username
        required: true
        schema:
          example: john_doe
          type: string
        style: simple
      responses:
        "200":
          description: User deleted successfully
        "400":
          description: "Cannot delete, invalid username supplied"
        "404":
          description: User to delete not found
      summary: Delete user
      tags:
      - user
    get:
      description: ""
      operationId: getUserByName
      parameters:
      - description: 'The name that needs to be fetched. Use user1 for testing. '
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Get user by user name
      tags:
      - user
    put:
      description: Updating the records can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - description: Name that need to be updated
        explode: false
        in: path
        name: username
        required: true
        schema:
          example: jane_doe
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
      responses:
        "200":
          description: User updated successfully
        "400":
          description: "Cannot update, invalid user supplied"
        "404":
          description: User to be updated not found
      summary: Updated user
      tags:
      - user
components:
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            example: []
            items:
              $ref: '#/components/schemas/User'
            type: array
      description: List of user object
      required: true
  schemas:
    Order:
      description: Ordering a pet
      example:
        id: 3456
        petId: 234
        quantity: 1
        shipDate: 2024-09-01T13:00:00Z
        status: approved
        complete: false
      properties:
        id:
          example: 123456
          format: int64
          type: integer
        petId:
          example: 345
          format: int64
          type: integer
        quantity:
          example: 5
          format: int32
          type: integer
        shipDate:
          example: 2024-08-31T13:00:00Z
          format: date-time
          type: string
        status:
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
          example: placed
          type: string
        complete:
          default: false
          type: boolean
      type: object
      xml:
        name: Order
    Category:
      description: Pet category
      example:
        id: 2
        name: doggie
      properties:
        id:
          example: 2
          format: int64
          type: integer
        name:
          example: doggie
          type: string
      type: object
      xml:
        name: Category
    User:
      description: Registered store user
      example:
        id: 123
        username: john_doe
        firstname: John
        lastname: Doe
      properties:
        id:
          example: 123
          format: int64
          type: integer
        username:
          example: john_doe
          type: string
        firstName:
          example: John
          type: string
        lastName:
          example: Doe
          type: string
        email:
          example: john.doe@example.com
          type: string
        password:
          example: my_secret
          type: string
        phone:
          example: +00-000-0000
          type: string
        userStatus:
          description: User Status
          example: 5
          format: int32
          type: integer
      type: object
      xml:
        name: User
    Tag:
      description: Tag definition
      example:
        id: 123
        name: Daisy
      properties:
        id:
          example: 123
          format: int64
          type: integer
        name:
          example: Daisy
          type: string
      type: object
      xml:
        name: Tag
    Pet:
      description: Definition of a pet
      example:
        name: Paula
        photoUrls: []
      properties:
        id:
          default: 40
          example: 25
          format: int64
          readOnly: true
          type: integer
        category:
          $ref: '#/components/schemas/Category'
        name:
          example: doggie
          type: string
        photoUrls:
          example: []
          items:
            example: https://example.com/photo.png
            type: string
          type: array
          xml:
            name: photoUrl
            wrapped: true
        tags:
          example: []
          items:
            $ref: '#/components/schemas/Tag'
          type: array
          xml:
            name: tag
            wrapped: true
        status:
          description: Pet status in the store
          enum:
          - available
          - pending
          - sold
          example: pending
          type: string
      required:
      - name
      - photoUrls
      type: object
      xml:
        name: Pet
    ApiResponse:
      description: API responses with code
      example:
        code: 200
      properties:
        code:
          example: 400
          format: int32
          type: integer
        type:
          example: status
          type: string
        message:
          example: This is a message
          type: string
      type: object
    updatePetWithForm_request:
      properties:
        name:
          description: Updated name of the pet
          type: string
        status:
          description: Updated status of the pet
          type: string
      type: object
    uploadFile_request:
      properties:
        additionalMetadata:
          description: Additional data to pass to server
          type: string
        file:
          description: file to upload
          format: binary
          type: string
      type: object
  securitySchemes:
    petstore_auth:
      description: Authenticate to pet store
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
      type: oauth2
    api_key:
      description: API key fo accessing the services
      in: header
      name: api_key
      type: apiKey
