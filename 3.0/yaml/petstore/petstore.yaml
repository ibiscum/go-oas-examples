openapi: 3.0.0
info:
  description: 'This is a sample server Petstore server.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For
    this sample, you can use the api key `special-key` to test the authorization filters.'
  version: 1.0.0
  title: Swagger Petstore
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://petstore.swagger.io/v2
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
paths:
  '/pet':
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        '$ref': '#/components/requestBodies/Pet'
      responses:
        '200':
          description: Added a new pet to the store
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: Updating an existing pet
      operationId: updatePet
      requestBody:
        '$ref': '#/components/requestBodies/Pet'
      responses:
        '200':
          description: Updating pet
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  '/pet/find-by-status':
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          example: []
          in: query
          description: Status values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: array
            items:
              example: pending
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              example: []
              schema:
                type: array
                items:
                  '$ref': '#/components/schemas/Pet'
            application/json:
              example: []
              schema:
                type: array
                items:
                  '$ref': '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  '/pet/find-by-tags':
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: Muliple tags can be provided with comma separated strings. Use
        tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          explode: true
          schema:
            example: []
            type: array
            items:
              example: Items
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                example: []
                type: array
                items:
                  '$ref': '#/components/schemas/Pet'
            application/json:
              schema:
                example: []
                type: array
                items:
                  '$ref': '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      deprecated: true
  '/pet/{petId}':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            example: 123
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                '$ref': '#/components/schemas/Pet'
            application/json:
              schema:
                '$ref': '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        default:
          description: successful response
      security:
        - api_key: []
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: Updating a pet in the store with form data
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            example: 123
            type: integer
            format: int64
      requestBody:
        description: Post operation to update pet status
        content:
          application/x-www-form-urlencoded:
            schema:
              example: 
                name: Adele
                status: sold
              type: object
              properties:
                name:
                  example: Updated name of the pet
                  description: Updated name of the pet
                  type: string
                status:
                  example: Updated status of the pet
                  description: Updated status of the pet
                  type: string
      responses:
        '200':
          description: Valid input
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      description: Delete a pet from database
      tags:
        - pet
      summary: Deletes a pet
      operationId: deletePet
      parameters:
        - name: api_key
          description: The API key
          in: header
          required: false
          schema:
            example: api_key
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            example: 123
            type: integer
            format: int64
      responses:
        '200':
          description: OK, valid ID
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  '/pet/{petId}/upload-image':
    post:
      tags:
        - pet
      summary: Uploads an image
      description: Upload an image of pet
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            example: 123
            type: integer
            format: int64
      requestBody:
        description: multipart/form-data as object
        content:
          multipart/form-data:
            schema:
              example: 
                additionalMetadata: Additional data to pass to server
              type: object
              properties:
                additionalMetadata:
                  example: Additional data to pass to server
                  description: Additional data to pass to server
                  type: string
                file:
                  example: file_binary
                  description: file to upload
                  type: string
                  format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  '/store/inventory':
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                example: {
                  sold: 100,
                  pending: 200,
                  available: 300
                }
                type: object
                additionalProperties:
                  example: 123
                  type: integer
                  format: int32
      security:
        - api_key: []
  '/store/order':
    post:
      description: Place an order for a pet from store
      tags:
        - store
      summary: Place an order for a pet
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/Order'
        description: order placed for purchasing the pet
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                '$ref': '#/components/schemas/Order'
            application/json:
              schema:
                '$ref': '#/components/schemas/Order'
        '400':
          description: Invalid Order
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10. Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            example: 9
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                '$ref': '#/components/schemas/Order'
            application/json:
              schema:
                '$ref': '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value.
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            example: 5
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Order has been successful
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  '/user':
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/User'
        description: Created user object
        required: true
      responses:
        '200':
          description: successful operation
        default:
          description: successful operation
  '/user/create-with-array':
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users by given input array
      operationId: createUsersWithArrayInput
      requestBody:
        '$ref': '#/components/requestBodies/UserArray'
      responses:
        '200':
          description: successful operation
        default:
          description: successful operation
  '/user/create-with-list':
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users by given input array
      operationId: createUsersWithListInput
      requestBody:
        '$ref': '#/components/requestBodies/UserArray'
      responses:
        '200':
          description: OK, successful operation post user with list
        default:
          description: successful operation post user with list
  '/user/login':
    get:
      tags:
        - user
      summary: Logs user into the system
      description: Endpoint for user login
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            example: john_doe
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            example: password
            type: string
      responses:
        '200':
          description: successful operation get user login
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                example: 123
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                example: "2018-03-20T09:12:28Z"
                type: string
                format: date-time
          content:
            application/xml:
              example: valid xml
              schema:
                type: string
            application/json:
              schema:
                example: user/login
                type: string
        '400':
          description: Invalid username/password supplied
  '/user/logout':
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: Logs out current logged in user in current session 
      operationId: logoutUser
      responses:
        '200':
          description: successful operation logout user
        default:
          description: successful operation logout user default
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: Get user by parameter user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            example: John Doe
            type: string
      responses:
        '200':
          description: successful operation get user by user name
          content:
            application/xml:
              schema:
                '$ref': '#/components/schemas/User'
            application/json:
              schema:
                '$ref': '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: Updating the records can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: Name that need to be updated
          required: true
          schema:
            example: jane_doe
            type: string
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/User'
        description: Updated user object
        required: true
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Cannot update, invalid user supplied
        '404':
          description: User to be updated not found
    delete:
      tags:
        - user
      summary: Delete user
      description: Deletion can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            example: john_doe
            type: string
      responses:
        '200':
          description: User deleted successfully
        '400':
          description: Cannot delete, invalid username supplied
        '404':
          description: User to delete not found
components:
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            '$ref': '#/components/schemas/Pet'
        application/xml:
          schema:
            '$ref': '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            example: []
            type: array
            items:
              '$ref': '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    petstore_auth:
      description: Authenticate to pet store
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      description: API key fo accessing the services
      type: apiKey
      name: api_key
      in: header
  schemas:
    Order:
      description: Ordering a pet
      example:
        id: 3456
        petId: 234
        quantity: 1
        shipDate: "2024-09-01T13:00:00Z"
        status: approved
        complete: false
      type: object
      properties:
        id:
          example: 123456
          type: integer
          format: int64
        petId:
          example: 345
          type: integer
          format: int64
        quantity:
          example: 5
          type: integer
          format: int32
        shipDate:
          example: "2024-08-31T13:00:00Z"
          type: string
          format: date-time
        status:
          example: placed
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      description: Pet category
      example:
        id: 2
        name: doggie
      type: object
      properties:
        id:
          example: 2
          type: integer
          format: int64
        name:
          example: doggie
          type: string
      xml:
        name: Category
    User:
      description: Registered store user
      example: 
        id: 123
        username: john_doe
        firstname: John
        lastname: Doe
      type: object
      properties:
        id:
          example: 123
          type: integer
          format: int64
        username:
          example: john_doe
          type: string
        firstName:
          example: John
          type: string
        lastName:
          example: Doe
          type: string
        email:
          example: john.doe@example.com
          type: string
        password:
          example: my_secret
          type: string
        phone:
          example: +00-000-0000
          type: string
        userStatus:
          example: 5
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      description: Tag definition
      example: 
        id: 123
        name: Daisy
      type: object
      properties:
        id:
          example: 123
          type: integer
          format: int64
        name:
          example: Daisy
          type: string
      xml:
        name: Tag
    Pet:
      description: Definition of a pet
      example: 
        name: Paula
        photoUrls: []  
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          default: 40
          example: 25
        category:
          '$ref': '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          example: []
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
            example: https://example.com/photo.png
        tags:
          example: []
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            '$ref': '#/components/schemas/Tag'
        status:
          example: pending
          type: string
          description: Pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    ApiResponse:
      description: API responses with code
      example:
        code: 200
      type: object
      properties:
        code:
          example: 400
          type: integer
          format: int32
        type:
          example: status
          type: string
        message:
          example: This is a message
          type: string
