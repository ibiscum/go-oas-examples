/*
Support for request body and parameter examples

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#requestBodyObject

API version: 1.0.0
Contact: support@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package requestexample

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// FormDataAPIService FormDataAPI service
type FormDataAPIService service

type ApiPostRequestBodyFormDataExampleRequest struct {
	ctx context.Context
	ApiService *FormDataAPIService
	clientId *string
	clientSecret *string
	scope *int32
}

func (r ApiPostRequestBodyFormDataExampleRequest) ClientId(clientId string) ApiPostRequestBodyFormDataExampleRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostRequestBodyFormDataExampleRequest) ClientSecret(clientSecret string) ApiPostRequestBodyFormDataExampleRequest {
	r.clientSecret = &clientSecret
	return r
}

func (r ApiPostRequestBodyFormDataExampleRequest) Scope(scope int32) ApiPostRequestBodyFormDataExampleRequest {
	r.scope = &scope
	return r
}

func (r ApiPostRequestBodyFormDataExampleRequest) Execute() (*Token, *http.Response, error) {
	return r.ApiService.PostRequestBodyFormDataExampleExecute(r)
}

/*
PostRequestBodyFormDataExample Demo handling of formData

Requst body with form data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostRequestBodyFormDataExampleRequest
*/
func (a *FormDataAPIService) PostRequestBodyFormDataExample(ctx context.Context) ApiPostRequestBodyFormDataExampleRequest {
	return ApiPostRequestBodyFormDataExampleRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Token
func (a *FormDataAPIService) PostRequestBodyFormDataExampleExecute(r ApiPostRequestBodyFormDataExampleRequest) (*Token, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Token
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FormDataAPIService.PostRequestBodyFormDataExample")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/requestBody-form-data-example"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.clientSecret == nil {
		return localVarReturnValue, nil, reportError("clientSecret is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "client_id", r.clientId, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "client_secret", r.clientSecret, "", "")
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "scope", r.scope, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
