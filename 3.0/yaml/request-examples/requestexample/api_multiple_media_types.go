/*
Support for request body and parameter examples

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#requestBodyObject

API version: 1.0.0
Contact: support@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package requestexample

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// MultipleMediaTypesAPIService MultipleMediaTypesAPI service
type MultipleMediaTypesAPIService service

type ApiPostRequestBodyMultiMediaTypesRequest struct {
	ctx context.Context
	ApiService *MultipleMediaTypesAPIService
}

func (r ApiPostRequestBodyMultiMediaTypesRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostRequestBodyMultiMediaTypesExecute(r)
}

/*
PostRequestBodyMultiMediaTypes Within `examples`

This operation has a `requestBody` containing multiple media types with each containing a separately maintained example within `examples` at the Media Type Object level.
ðŸ“š OpenAPI specification references:
* [3.0.3 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#mediaTypeObject)
* [3.1.0 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#mediaTypeObject)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostRequestBodyMultiMediaTypesRequest
*/
func (a *MultipleMediaTypesAPIService) PostRequestBodyMultiMediaTypes(ctx context.Context) ApiPostRequestBodyMultiMediaTypesRequest {
	return ApiPostRequestBodyMultiMediaTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MultipleMediaTypesAPIService) PostRequestBodyMultiMediaTypesExecute(r ApiPostRequestBodyMultiMediaTypesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultipleMediaTypesAPIService.PostRequestBodyMultiMediaTypes")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/requestBody-multi-media-types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"text/plain", "application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
