/*
Support for request body and parameter examples

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#requestBodyObject

API version: 1.0.0
Contact: support@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package requestexample

import (
	"encoding/json"
)

// checks if the Pet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Pet{}

// Pet struct for Pet
type Pet struct {
	Name *string `json:"name,omitempty"`
	PetType *string `json:"petType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Pet Pet

// NewPet instantiates a new Pet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPet() *Pet {
	this := Pet{}
	return &this
}

// NewPetWithDefaults instantiates a new Pet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPetWithDefaults() *Pet {
	this := Pet{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Pet) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pet) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Pet) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Pet) SetName(v string) {
	o.Name = &v
}

// GetPetType returns the PetType field value if set, zero value otherwise.
func (o *Pet) GetPetType() string {
	if o == nil || IsNil(o.PetType) {
		var ret string
		return ret
	}
	return *o.PetType
}

// GetPetTypeOk returns a tuple with the PetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pet) GetPetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PetType) {
		return nil, false
	}
	return o.PetType, true
}

// HasPetType returns a boolean if a field has been set.
func (o *Pet) HasPetType() bool {
	if o != nil && !IsNil(o.PetType) {
		return true
	}

	return false
}

// SetPetType gets a reference to the given string and assigns it to the PetType field.
func (o *Pet) SetPetType(v string) {
	o.PetType = &v
}

func (o Pet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Pet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PetType) {
		toSerialize["petType"] = o.PetType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Pet) UnmarshalJSON(data []byte) (err error) {
	varPet := _Pet{}

	err = json.Unmarshal(data, &varPet)

	if err != nil {
		return err
	}

	*o = Pet(varPet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "petType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePet struct {
	value *Pet
	isSet bool
}

func (v NullablePet) Get() *Pet {
	return v.value
}

func (v *NullablePet) Set(val *Pet) {
	v.value = val
	v.isSet = true
}

func (v NullablePet) IsSet() bool {
	return v.isSet
}

func (v *NullablePet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePet(val *Pet) *NullablePet {
	return &NullablePet{value: val, isSet: true}
}

func (v NullablePet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


