/*
Support for request body and parameter examples

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#requestBodyObject

API version: 1.0.0
Contact: support@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package requestexample

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// MultipleExamplesAPIService MultipleExamplesAPI service
type MultipleExamplesAPIService service

type ApiGetParameterExamplesParam1Param2Request struct {
	ctx context.Context
	ApiService *MultipleExamplesAPIService
	param1 string
	param2 string
}

func (r ApiGetParameterExamplesParam1Param2Request) Execute() (*User, *http.Response, error) {
	return r.ApiService.GetParameterExamplesParam1Param2Execute(r)
}

/*
GetParameterExamplesParam1Param2 Within `examples` (parameters)

This operation has several parameters with examples alongside separately maintained example within `examples` at the Media Type Object level.
ðŸ“š OpenAPI specification references:
* [3.0.3 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#mediaTypeObject)
* [3.1.0 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#mediaTypeObject)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param param1
 @param param2
 @return ApiGetParameterExamplesParam1Param2Request
*/
func (a *MultipleExamplesAPIService) GetParameterExamplesParam1Param2(ctx context.Context, param1 string, param2 string) ApiGetParameterExamplesParam1Param2Request {
	return ApiGetParameterExamplesParam1Param2Request{
		ApiService: a,
		ctx: ctx,
		param1: param1,
		param2: param2,
	}
}

// Execute executes the request
//  @return User
func (a *MultipleExamplesAPIService) GetParameterExamplesParam1Param2Execute(r ApiGetParameterExamplesParam1Param2Request) (*User, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *User
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultipleExamplesAPIService.GetParameterExamplesParam1Param2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/parameterExamples/{param1}/{param2}"
	localVarPath = strings.Replace(localVarPath, "{"+"param1"+"}", url.PathEscape(parameterValueToString(r.param1, "param1")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"param2"+"}", url.PathEscape(parameterValueToString(r.param2, "param2")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v User
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchParameterExamplesParam1Param2Request struct {
	ctx context.Context
	ApiService *MultipleExamplesAPIService
	param1 string
	param2 string
	param5 *string
	user *User
	param3 *string
	param4 *string
	param6 *string
}

func (r ApiPatchParameterExamplesParam1Param2Request) Param5(param5 string) ApiPatchParameterExamplesParam1Param2Request {
	r.param5 = &param5
	return r
}

func (r ApiPatchParameterExamplesParam1Param2Request) User(user User) ApiPatchParameterExamplesParam1Param2Request {
	r.user = &user
	return r
}

func (r ApiPatchParameterExamplesParam1Param2Request) Param3(param3 string) ApiPatchParameterExamplesParam1Param2Request {
	r.param3 = &param3
	return r
}

func (r ApiPatchParameterExamplesParam1Param2Request) Param4(param4 string) ApiPatchParameterExamplesParam1Param2Request {
	r.param4 = &param4
	return r
}

func (r ApiPatchParameterExamplesParam1Param2Request) Param6(param6 string) ApiPatchParameterExamplesParam1Param2Request {
	r.param6 = &param6
	return r
}

func (r ApiPatchParameterExamplesParam1Param2Request) Execute() (*User, *http.Response, error) {
	return r.ApiService.PatchParameterExamplesParam1Param2Execute(r)
}

/*
PatchParameterExamplesParam1Param2 Within `examples` (mixed)

This operation has parameter and body examples alongside separately maintained example within `examples` at the Media Type Object level.
ðŸ“š OpenAPI specification references:
* [3.0.3 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#mediaTypeObject)
* [3.1.0 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#mediaTypeObject)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param param1
 @param param2
 @return ApiPatchParameterExamplesParam1Param2Request
*/
func (a *MultipleExamplesAPIService) PatchParameterExamplesParam1Param2(ctx context.Context, param1 string, param2 string) ApiPatchParameterExamplesParam1Param2Request {
	return ApiPatchParameterExamplesParam1Param2Request{
		ApiService: a,
		ctx: ctx,
		param1: param1,
		param2: param2,
	}
}

// Execute executes the request
//  @return User
func (a *MultipleExamplesAPIService) PatchParameterExamplesParam1Param2Execute(r ApiPatchParameterExamplesParam1Param2Request) (*User, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *User
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultipleExamplesAPIService.PatchParameterExamplesParam1Param2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/parameterExamples/{param1}/{param2}"
	localVarPath = strings.Replace(localVarPath, "{"+"param1"+"}", url.PathEscape(parameterValueToString(r.param1, "param1")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"param2"+"}", url.PathEscape(parameterValueToString(r.param2, "param2")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.param5 == nil {
		return localVarReturnValue, nil, reportError("param5 is required and must be specified")
	}
	if r.user == nil {
		return localVarReturnValue, nil, reportError("user is required and must be specified")
	}

	if r.param3 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "param3", r.param3, "form", "")
	}
	if r.param4 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "param4", r.param4, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "param5", r.param5, "simple", "")
	if r.param6 != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "param6", r.param6, "simple", "")
	}
	// body params
	localVarPostBody = r.user
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v User
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchRequestBodyPrimitiveExampleRequest struct {
	ctx context.Context
	ApiService *MultipleExamplesAPIService
	pet *Pet
}

func (r ApiPatchRequestBodyPrimitiveExampleRequest) Pet(pet Pet) ApiPatchRequestBodyPrimitiveExampleRequest {
	r.pet = &pet
	return r
}

func (r ApiPatchRequestBodyPrimitiveExampleRequest) Execute() (*Pet, *http.Response, error) {
	return r.ApiService.PatchRequestBodyPrimitiveExampleExecute(r)
}

/*
PatchRequestBodyPrimitiveExample Stringified JSON object in an `examples` value

This operation has a `requestBody` with separately maintained example within `examples` at the Media Type Object level containing stringified JSON object.
ðŸ“š OpenAPI specification references:
* [3.0.3 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#mediaTypeObject)
* [3.1.0 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#mediaTypeObject)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPatchRequestBodyPrimitiveExampleRequest
*/
func (a *MultipleExamplesAPIService) PatchRequestBodyPrimitiveExample(ctx context.Context) ApiPatchRequestBodyPrimitiveExampleRequest {
	return ApiPatchRequestBodyPrimitiveExampleRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Pet
func (a *MultipleExamplesAPIService) PatchRequestBodyPrimitiveExampleExecute(r ApiPatchRequestBodyPrimitiveExampleRequest) (*Pet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Pet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultipleExamplesAPIService.PatchRequestBodyPrimitiveExample")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/requestBody-primitive-example"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pet == nil {
		return localVarReturnValue, nil, reportError("pet is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.pet
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostRequestBodyMultipleRequest struct {
	ctx context.Context
	ApiService *MultipleExamplesAPIService
	user *User
}

func (r ApiPostRequestBodyMultipleRequest) User(user User) ApiPostRequestBodyMultipleRequest {
	r.user = &user
	return r
}

func (r ApiPostRequestBodyMultipleRequest) Execute() (*User, *http.Response, error) {
	return r.ApiService.PostRequestBodyMultipleExecute(r)
}

/*
PostRequestBodyMultiple Within `examples` (body)

This operation has a `requestBody` with separately maintained examples within `examples` at the Media Type Object level.
ðŸ“š OpenAPI specification references:
* [3.0.3 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#mediaTypeObject)
* [3.1.0 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#mediaTypeObject)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostRequestBodyMultipleRequest
*/
func (a *MultipleExamplesAPIService) PostRequestBodyMultiple(ctx context.Context) ApiPostRequestBodyMultipleRequest {
	return ApiPostRequestBodyMultipleRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return User
func (a *MultipleExamplesAPIService) PostRequestBodyMultipleExecute(r ApiPostRequestBodyMultipleRequest) (*User, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *User
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultipleExamplesAPIService.PostRequestBodyMultiple")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/requestBody"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.user == nil {
		return localVarReturnValue, nil, reportError("user is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.user
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v User
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutRequestBodyPrimitiveExampleRequest struct {
	ctx context.Context
	ApiService *MultipleExamplesAPIService
	pet *[]Pet
}

func (r ApiPutRequestBodyPrimitiveExampleRequest) Pet(pet []Pet) ApiPutRequestBodyPrimitiveExampleRequest {
	r.pet = &pet
	return r
}

func (r ApiPutRequestBodyPrimitiveExampleRequest) Execute() ([]Pet, *http.Response, error) {
	return r.ApiService.PutRequestBodyPrimitiveExampleExecute(r)
}

/*
PutRequestBodyPrimitiveExample Stringified JSON arrays in an `examples` value

This operation has a `requestBody` with separately maintained example within `examples` at the Media Type Object level containing a stringified JSON array.
ðŸ“š OpenAPI specification references:
* [3.0.3 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#mediaTypeObject)
* [3.1.0 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#mediaTypeObject)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPutRequestBodyPrimitiveExampleRequest
*/
func (a *MultipleExamplesAPIService) PutRequestBodyPrimitiveExample(ctx context.Context) ApiPutRequestBodyPrimitiveExampleRequest {
	return ApiPutRequestBodyPrimitiveExampleRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Pet
func (a *MultipleExamplesAPIService) PutRequestBodyPrimitiveExampleExecute(r ApiPutRequestBodyPrimitiveExampleRequest) ([]Pet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Pet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultipleExamplesAPIService.PutRequestBodyPrimitiveExample")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/requestBody-primitive-example"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pet == nil {
		return localVarReturnValue, nil, reportError("pet is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.pet
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
