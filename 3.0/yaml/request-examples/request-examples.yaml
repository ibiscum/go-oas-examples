openapi: 3.0.0
info:
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
  title: Support for request body and parameter examples
  description: https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#requestBodyObject
  version: 1.0.0
servers:
  - url: https://httpbin.org/anything
tags:
  - name: Multiple examples
  - name: Single example
  - name: Multiple media types
  - name: Form data
paths:
  '/parameter-examples/{param1}/{param2}':
    get:
      operationId: getParameterExamplesParam1Param2
      tags:
        - Multiple examples
      summary: Within `examples` (parameters)
      description: "This operation has several parameters with examples alongside
        separately maintained example within `examples` at the Media Type Object level.\n\n\U0001F4DA
        OpenAPI specification references:\n\n* [3.0.3 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#mediaTypeObject)\n\n*
        [3.1.0 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#mediaTypeObject)"
      parameters:
        - name: param1
          description: This is the first parameter
          in: path
          required: true
          schema:
            type: string
          examples:
            userRegistration:
              summary: example summary (param 1)
              description: a lengthier example description (param 1)
              value: param1-example
            yetAnotherParamExample:
              value: param1-example-again
        - name: param2
          description: This is the second parameter
          in: path
          required: true
          schema:
            type: string
          examples:
            userRegistration:
              summary: example summary (param 2)
              description: a lengthier example description (param 2)
              value: param2-example
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/user'
              examples:
                userRegistration:
                  value:
                    summary: example summary (response)
                    description: a lengthier example description (response)
                    id: 1234
                    email: test+response@example.com
                    name: Test user name (response)
                response:
                  value:
                    id: 1234
                    email: test@example.com
                    name: Test user name
        '400':
          description: Validation failed
          content:
            application/xml:
              examples:
                response:
                  value: <?xml version="1.0" encoding="UTF-8"?><note><body>Invalid
                    user!</body></note>
        default:
          description: OK
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/user'
              examples:
                response:
                  value:
                    id: 1234
                    email: test@example.com
                    name: Test user name
    patch:
      operationId: patchParameterExamplesParam1Param2
      tags:
        - Multiple examples
      summary: Within `examples` (mixed)
      description: "This operation has parameter and body examples alongside separately
        maintained example within `examples` at the Media Type Object level.\n\n\U0001F4DA
        OpenAPI specification references:\n\n* [3.0.3 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#mediaTypeObject)\n\n*
        [3.1.0 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#mediaTypeObject)"
      parameters:
        - name: param1
          description: This is the first parameter for the patch operation
          in: path
          required: true
          schema:
            type: string
          examples:
            userRegistration:
              summary: example summary (param 1)
              description: a lengthier example description (param 1)
              value: param1-example
            yetAnotherParamExample:
              value: param1-example-again
        - name: param2
          in: path
          required: true
          schema:
            type: string
          examples:
            userRegistration:
              summary: example summary (param 2)
              description: a lengthier example description (param 2)
              value: param2-example
        - name: param3
          in: query
          schema:
            type: string
          examples:
            userRegistration:
              summary: example summary (param 3)
              description: a lengthier example description (param 3)
              value: param3-example
        - name: param4
          in: query
          schema:
            type: string
          example: param4-example
        - name: param5
          in: header
          required: true
          schema:
            type: string
          examples:
            userRegistration:
              summary: example summary (param 5)
              description: a lengthier example description (param 5)
              value: param5-example
        - name: param6
          in: header
          schema:
            type: string
          example: param6-example
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/user'
            examples:
              userRegistration:
                value:
                  id: 1234
                  email: test@example.com
                  name: Test user name
              userRegistration alt:
                value:
                  id: 5678
                  email: test@example.com
                  name: Test user name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/user'
              examples:
                userRegistration:
                  value:
                    summary: example summary (response)
                    description: a lengthier example description (response)
                    id: 1234
                    email: test+response@example.com
                    name: Test user name (response)
                response:
                  value:
                    id: 1234
                    email: test@example.com
                    name: Test user name
        '400':
          description: Validation failed
          content:
            application/xml:
              examples:
                response:
                  value: <?xml version="1.0" encoding="UTF-8"?><note><body>Invalid
                    user!</body></note>
        default:
          description: OK
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/user'
              examples:
                response:
                  value:
                    id: 1234
                    email: test@example.com
                    name: Test user name
    put:
      operationId: putParameterExamplesParam1Param2
      tags:
        - Single example
      summary: Within `example`
      description: "This operation has a param example and `requestBody` with separately
        maintained example within a simple `example` object at the Media Type Object
        level.\n\n\U0001F4DA OpenAPI specification references:\n\n* [3.0.3 Media Type
        Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#mediaTypeObject)\n\n*
        [3.1.0 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#mediaTypeObject)"
      parameters:
        - name: param1
          in: path
          required: true
          schema:
            type: string
          example: param1-example
        - name: param2
          description: This is the second parameter
          in: path
          required: true
          schema:
            type: string
          example: param2-example
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/user'
            example:
              id: 12343354
              email: test@example.com
              name: Test user name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/user'
              example:
                id: 12343354
                email: test@example.com
                name: Test user name
  '/request-body':
    post:
      operationId: postRequestBody
      tags:
        - Multiple examples
      summary: Within `examples` (body)
      description: "This operation has a `requestBody` with separately maintained
        examples within `examples` at the Media Type Object level.\n\n\U0001F4DA OpenAPI
        specification references:\n\n* [3.0.3 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#mediaTypeObject)\n\n*
        [3.1.0 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#mediaTypeObject)"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/user'
            examples:
              userRegistration:
                value:
                  id: 1234
                  email: test@example.com
                  name: Test user name
              userRegistration alt:
                value:
                  id: 5678
                  email: test@example.com
                  name: Test user name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/user'
              examples:
                userRegistration:
                  summary: example summary (response)
                  description: a lengthier example description (response)
                  value:
                    id: 1234
                    email: test+response@example.com
                    name: Test user name (response)
                response:
                  value:
                    id: 1234
                    email: test@example.com
                    name: Test user name
        '400':
          description: Validation failed
          content:
            application/xml:
              examples:
                response:
                  value: <?xml version="1.0" encoding="UTF-8"?><note><body>Invalid
                    user!</body></note>
        default:
          description: OK
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/user'
              examples:
                response:
                  value:
                    id: 1234
                    email: test@example.com
                    name: Test user name
    patch:
      operationId: patchRequestBody
      tags:
        - Single example
      summary: Within `example`
      description: "This operation has a `requestBody` with separately maintained
        example within a simple `example` object at the Media Type Object level.\n\n\U0001F4DA
        OpenAPI specification references:\n\n* [3.0.3 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#mediaTypeObject)\n\n*
        [3.1.0 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#mediaTypeObject)"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/user'
            example:
              id: 12343354
              email: test@example.com
              name: Test user name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/user'
              example:
                id: 12343354
                email: test@example.com
                name: Test user name
    put:
      operationId: putRequestBody
      tags:
        - Single example
      summary: '`$ref` within `example`'
      description: "This operation has a `requestBody` with separately maintained
        example within a `$ref` in a simple `example` object at the Media Type Object
        level.\n\n\U0001F4DA OpenAPI specification references:\n\n* [3.0.3 Media Type
        Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#mediaTypeObject)\n\n*
        [3.1.0 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#mediaTypeObject)"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/user'
            example:
              '$ref': '#/components/examples/user/value'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/user'
              example:
                '$ref': '#/components/examples/user/value'
  '/request-body-primitive-example':
    post:
      operationId: postRequestBodyPrimitiveExample
      tags:
        - Single example
      summary: Primitive `example`
      description: |
        This operation has a `requestBody` with separately maintained **primitive** example within a simple `example` object at the Media Type Object
        level.
        
        \U0001F4DA OpenAPI specification references:
        
        * [3.0.3 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#mediaTypeObject)
        * [3.1.0 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#mediaTypeObject)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
            example: column1,column2,column3,column4
      responses:
        '200':
          description: OK, request body primitive example, post operation
          content:
            application/json:
              schema:
                type: string
              example: column1,column2,column3,column4
    patch:
      operationId: patchRequestBodyPrimitiveExample
      tags:
        - Multiple examples
      summary: Stringified JSON object in an `examples` value
      description: |
        This operation has a `requestBody` with separately maintained example within `examples` at the Media Type Object level
        containing stringified JSON object.
        
        \U0001F4DA OpenAPI specification references:
        
        * [3.0.3 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#mediaTypeObject)
        * [3.1.0 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#mediaTypeObject)
      requestBody:
        description: Request body primitive example, patch operation
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/pet'
            examples:
              cat:
                summary: An example of a cat
                value: {
                    "name": "Fluffy",
                    "petType": "Cat"
                  }
              dog:
                summary: An example of a dog
                value: {
                    "name": "Buster",
                    "petType": "Dog"
                  }
      responses:
        '200':
          description: OK, request body primitive example, patch operation
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/pet'
              examples:
                cat:
                  summary: An example of a cat
                  value: {
                      "name": "Fluffy",
                      "petType": "Cat"
                    }
                dog:
                  summary: An example of a dog
                  value: {
                      "name": "Buster",
                      "petType": "Dog"
                    }
    put:
      operationId: putRequestBodyPrimitiveExample
      tags:
        - Multiple examples
      summary: Stringified JSON arrays in an `examples` value
      description: |
        This operation has a `requestBody` with separately maintained example within `examples` at the Media Type Object level
        containing a stringified JSON array.
        
        \U0001F4DA OpenAPI specification references:

        * [3.0.3 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#mediaTypeObject)
        * [3.1.0 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#mediaTypeObject)
      requestBody:
        description: Request body primitive example, put operation
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/pets'
            examples:
              cat:
                summary: An example of a cat
                value: [
                    {
                      "name": "Fluffy",
                      "petType": "Cat"
                    }
                  ]
              dog:
                summary: An example of a dog
                value: [
                    {
                      "name": "Buster",
                      "petType": "Dog"
                    }
                  ]
      responses:
        '200':
          description: OK, request body primitive example, pu toperation
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/pets'
              examples:
                cat:
                  summary: An example of a cat
                  value: [
                      {
                        "name": "Fluffy",
                        "petType": "Cat"
                      }
                    ]
                dog:
                  summary: An example of a dog
                  value: [
                      {
                        "name": "Buster",
                        "petType": "Dog"
                      }
                    ]
  '/request-body-multimedia-types':
    post:
      operationId: postRequestBodyMultiMediaTypes
      tags:
        - Multiple media types
      summary: Within `examples`
      description: |
        This operation has a `requestBody` containing multiple media types with each containing
        a separately maintained example within `examples` at the Media Type Object level.
        
        \U0001F4DA OpenAPI specification references:
        
        * [3.0.3 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#mediaTypeObject)
        * [3.1.0 Media Type Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#mediaTypeObject)"
      requestBody:
        description: Request body for multimedia types
        required: true
        content:
          text/plain:
            examples:
              response:
                value: OK
          application/json:
            examples:
              cat:
                summary: An example of a cat
                value:
                  name: Fluffy
                  petType: Cat
              dog:
                summary: An example of a dog
                value:
                  name: Buster
                  petType: Dog
      responses:
        '200':
          description: OK, request body for 
          content:
            text/plain:
              examples:
                response:
                  value: OK
            application/json:
              examples:
                cat:
                  summary: An example of a cat
                  value:
                    name: Fluffy
                    petType: Cat
                dog:
                  summary: An example of a dog
                  value:
                    name: Buster
                    petType: Dog
        '400':
          description: Bad request, validation failed
          content:
            application/xml:
              examples:
                response:
                  value: <?xml version="1.0" encoding="UTF-8"?><note><body>Invalid
                    pet!</body></note>
  '/request-body-form-data-example':
    post:
      description: Request body with form data
      operationId: postRequestBodyFormDataExample
      summary: Demo handling of formData
      tags:
        - Form data
      requestBody:
        description: Request body for form data
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - client_id
                - client_secret
              type: object
              properties:
                client_id:
                  example: client_id
                  type: string
                client_secret:
                  example: '!_client_secret_!'
                  type: string
                scope:
                  example: 5
                  type: integer
                  format: int32
            examples:
              auth_example:
                value:
                  client_id: id123
                  client_secret: secret456
                  scope: 789
        required: false
      responses:
        '200':
          description: Valid Token
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Token'
              examples:
                auth_example:
                  value:
                    access_token: 123
                    token_type: type456
                    expires_in: 789
        '401':
          description: Unauthorized
components:
  examples:
    user:
      description: Definition of a user object
      value:
        id: 12343354
        email: test@example.com
        name: Test user name
  schemas:
    pet:
      description: Definition of a pet object
      example:
        name: Jane
        petType: Cat
      type: object
      properties:
        name:
          example: Jane
          type: string
        petType:
          example: Cat
          type: string
          enum:
            - Cat
            - Dog
    pets:
      description: Array of pets
      example: 
        - pet:
          name: Paula
          petType: Cat
        - pet:
          name: Carlo
          petType: Dog
      type: array
      items:
        '$ref': '#/components/schemas/pet'
    # tag:
    #   type: object
    #   properties:
    #     id:
    #       example: 123456
    #       type: integer
    #       format: int64
    #     name:
    #       example: Paula
    #       type: string
    Token:
      description: Definition of token object
      example:
        token_type: JWT
        expires_in: 60
        access_token: 12345
      title: Token
      required:
        - access_token
        - token_type
        - expires_in
      type: object
      properties:
        access_token:
          example: 12345
          type: integer
          format: int32
        token_type:
          example: JWT
          type: string
        expires_in:
          example: 60
          type: integer
          format: int32
    user:
      description: Definition of a user record 
      example:
        id: 123
        email: ohn.doe@example.com
        name: John Doe
      type: object
      properties:
        id:
          example: 123
          type: number
        email:
          example: john.doe@example.com
          type: string
        name:
          example: John Doe
          type: string
