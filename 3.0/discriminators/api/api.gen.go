// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for BaseBuyerWebhookEventEventType.
const (
	BaseBuyerWebhookEventEventTypeApplicationApproved BaseBuyerWebhookEventEventType = "application_approved"
	BaseBuyerWebhookEventEventTypeApplicationDenied   BaseBuyerWebhookEventEventType = "application_denied"
)

// Defines values for BasePurchaseWebhookEventEventType.
const (
	BasePurchaseWebhookEventEventTypeApplicationApproved BasePurchaseWebhookEventEventType = "application_approved"
	BasePurchaseWebhookEventEventTypeApplicationDenied   BasePurchaseWebhookEventEventType = "application_denied"
)

// Defines values for BaseWebhookEventEventType.
const (
	ApplicationApproved BaseWebhookEventEventType = "application_approved"
	ApplicationDenied   BaseWebhookEventEventType = "application_denied"
)

// Defines values for DogBreed.
const (
	DogBreedDingo     DogBreed = "Dingo"
	DogBreedHusky     DogBreed = "Husky"
	DogBreedRetriever DogBreed = "Retriever"
	DogBreedShepherd  DogBreed = "Shepherd"
)

// Defines values for DogNoDiscBreed.
const (
	DogNoDiscBreedDingo     DogNoDiscBreed = "Dingo"
	DogNoDiscBreedHusky     DogNoDiscBreed = "Husky"
	DogNoDiscBreedRetriever DogNoDiscBreed = "Retriever"
	DogNoDiscBreedShepherd  DogNoDiscBreed = "Shepherd"
)

// Defines values for OneOfWithImproperlyPlacedDiscriminatorJSONBodyConnectorType.
const (
	OneOfWithImproperlyPlacedDiscriminatorJSONBodyConnectorTypeGcsImport OneOfWithImproperlyPlacedDiscriminatorJSONBodyConnectorType = "gcsImport"
	OneOfWithImproperlyPlacedDiscriminatorJSONBodyConnectorTypeS3Import  OneOfWithImproperlyPlacedDiscriminatorJSONBodyConnectorType = "s3Import"
)

// Defines values for MappingWithDuplicateSchemasJSONBodyDiscrimValue.
const (
	OneA  MappingWithDuplicateSchemasJSONBodyDiscrimValue = "oneA"
	OneB  MappingWithDuplicateSchemasJSONBodyDiscrimValue = "oneB"
	OneC  MappingWithDuplicateSchemasJSONBodyDiscrimValue = "oneC"
	Three MappingWithDuplicateSchemasJSONBodyDiscrimValue = "three"
	TwoA  MappingWithDuplicateSchemasJSONBodyDiscrimValue = "twoA"
	TwoB  MappingWithDuplicateSchemasJSONBodyDiscrimValue = "twoB"
)

// ApplicationApprovedEvent Purchase webhook event
type ApplicationApprovedEvent = BasePurchaseWebhookEvent

// ApplicationDeniedEvent Purchase webhook event
type ApplicationDeniedEvent = BasePurchaseWebhookEvent

// BaseBuyerWebhookEvent defines model for BaseBuyerWebhookEvent.
type BaseBuyerWebhookEvent struct {
	// BuyerId ID of the buyer the event corresponds to.
	BuyerId string `json:"buyer_id"`

	// EventId ID of the event.
	EventId string `json:"event_id"`

	// EventType Type of the webhook event.
	EventType BaseBuyerWebhookEventEventType `json:"event_type"`
}

// BaseBuyerWebhookEventEventType Type of the webhook event.
type BaseBuyerWebhookEventEventType string

// BasePurchaseWebhookEvent defines model for BasePurchaseWebhookEvent.
type BasePurchaseWebhookEvent struct {
	// BuyerId ID of the buyer the event corresponds to.
	BuyerId string `json:"buyer_id"`

	// EventId ID of the event.
	EventId string `json:"event_id"`

	// EventType Type of the webhook event.
	EventType BasePurchaseWebhookEventEventType `json:"event_type"`

	// OrderId Provided Partner Order ID.
	OrderId *string `json:"order_id,omitempty"`
}

// BasePurchaseWebhookEventEventType Type of the webhook event.
type BasePurchaseWebhookEventEventType string

// BaseVehicle Vehicle (from [Redocly example](https://redocly.com/docs/resources/discriminator#when-to-use-the-openapi-discriminator))
type BaseVehicle struct {
	// IdealTerrain A road, river, air... Where does this vehicle thrive?
	IdealTerrain *string `json:"idealTerrain,omitempty"`

	// PowerSource How is the vehicle powered.
	PowerSource *string `json:"powerSource,omitempty"`

	// Range The 95th percentile range of a trip in kilometers.
	Range *int `json:"range,omitempty"`

	// TopSpeed The top speed in kilometers per hour rounded to the nearest integer.
	TopSpeed *int `json:"topSpeed,omitempty"`

	// VehicleType The type of vehicle.
	VehicleType *string `json:"vehicleType,omitempty"`
}

// BaseWebhookEvent Base webhook event
type BaseWebhookEvent struct {
	// EventId ID of the event.
	EventId string `json:"event_id"`

	// EventType Type of the webhook event.
	EventType BaseWebhookEventEventType `json:"event_type"`
}

// BaseWebhookEventEventType Type of the webhook event.
type BaseWebhookEventEventType string

// Cat defines model for Cat.
type Cat struct {
	Age     *int   `json:"age,omitempty"`
	Hunts   *bool  `json:"hunts,omitempty"`
	PetType string `json:"pet_type"`
}

// CatNoDisc defines model for CatNoDisc.
type CatNoDisc struct {
	Age     *int   `json:"age,omitempty"`
	Hunts   *bool  `json:"hunts,omitempty"`
	PetType string `json:"pet_type"`
}

// Dog defines model for Dog.
type Dog struct {
	Bark    *bool     `json:"bark,omitempty"`
	Breed   *DogBreed `json:"breed,omitempty"`
	PetType string    `json:"pet_type"`
}

// DogBreed defines model for Dog.Breed.
type DogBreed string

// DogNoDisc defines model for DogNoDisc.
type DogNoDisc struct {
	Bark    *bool           `json:"bark,omitempty"`
	Breed   *DogNoDiscBreed `json:"breed,omitempty"`
	PetType string          `json:"pet_type"`
}

// DogNoDiscBreed defines model for DogNoDisc.Breed.
type DogNoDiscBreed string

// OptionOneNoDisc Option one no discriminator
type OptionOneNoDisc struct {
	Discrim   string   `json:"discrim"`
	Optionone *float32 `json:"optionone,omitempty"`
}

// OptionThreeNoDisc Option three no discriminator
type OptionThreeNoDisc struct {
	Discrim     string  `json:"discrim"`
	Optionthree *string `json:"optionthree,omitempty"`
}

// OptionTwoNoDisc Option two no discriminator
type OptionTwoNoDisc struct {
	Discrim   string  `json:"discrim"`
	Optiontwo *string `json:"optiontwo,omitempty"`
}

// Pet Definition of a pet
type Pet struct {
	PetType string `json:"pet_type"`
}

// PetNoDisc Pet with no discriminator
type PetNoDisc struct {
	PetType string `json:"pet_type"`
}

// GcsImport Import into Google cloud service
type GcsImport struct {
	GcsBucket *string `json:"gcs_bucket,omitempty"`
	GcsPrefix *string `json:"gcs_prefix,omitempty"`
}

// Object1 First type of object
type Object1 struct {
	A *string `json:"a,omitempty"`
	B *string `json:"b,omitempty"`
}

// Object2 Second type of object
type Object2 struct {
	C *string `json:"c,omitempty"`
	D *string `json:"d,omitempty"`
}

// S3Import Import into S3
type S3Import struct {
	S3Bucket *string `json:"s3_bucket,omitempty"`
	S3Prefix *string `json:"s3_prefix,omitempty"`
}

// OneOfWithTopLevelDiscriminatorAndMappingJSONBody defines parameters for OneOfWithTopLevelDiscriminatorAndMapping.
type OneOfWithTopLevelDiscriminatorAndMappingJSONBody struct {
	union json.RawMessage
}

// OneOfWithTopLevelDiscriminatorNoMappingJSONBody defines parameters for OneOfWithTopLevelDiscriminatorNoMapping.
type OneOfWithTopLevelDiscriminatorNoMappingJSONBody struct {
	union json.RawMessage
}

// OneOfWithNestedAllOfAndEmbeddedDiscriminatorJSONBody defines parameters for OneOfWithNestedAllOfAndEmbeddedDiscriminator.
type OneOfWithNestedAllOfAndEmbeddedDiscriminatorJSONBody struct {
	union json.RawMessage
}

// OneOfWithImproperlyPlacedDiscriminatorJSONBody defines parameters for OneOfWithImproperlyPlacedDiscriminator.
type OneOfWithImproperlyPlacedDiscriminatorJSONBody struct {
	ConnectorProperties *OneOfWithImproperlyPlacedDiscriminatorJSONBody_ConnectorProperties `json:"connector_properties,omitempty"`
	ConnectorType       *OneOfWithImproperlyPlacedDiscriminatorJSONBodyConnectorType        `json:"connector_type,omitempty"`
}

// OneOfWithImproperlyPlacedDiscriminatorJSONBody_ConnectorProperties defines parameters for OneOfWithImproperlyPlacedDiscriminator.
type OneOfWithImproperlyPlacedDiscriminatorJSONBody_ConnectorProperties struct {
	union json.RawMessage
}

// OneOfWithImproperlyPlacedDiscriminatorJSONBodyConnectorType defines parameters for OneOfWithImproperlyPlacedDiscriminator.
type OneOfWithImproperlyPlacedDiscriminatorJSONBodyConnectorType string

// MappingOfSchemaNamesJSONBody defines parameters for MappingOfSchemaNames.
type MappingOfSchemaNamesJSONBody struct {
	union json.RawMessage
}

// MappingWithDuplicateSchemasJSONBody defines parameters for MappingWithDuplicateSchemas.
type MappingWithDuplicateSchemasJSONBody struct {
	DiscrimValue *MappingWithDuplicateSchemasJSONBodyDiscrimValue `json:"discrimValue,omitempty"`
	union        json.RawMessage
}

// MappingWithDuplicateSchemasJSONBodyDiscrimValue defines parameters for MappingWithDuplicateSchemas.
type MappingWithDuplicateSchemasJSONBodyDiscrimValue string

// OneOfWithNestedOneOfAndEmbeddedDiscriminatorJSONBody defines parameters for OneOfWithNestedOneOfAndEmbeddedDiscriminator.
type OneOfWithNestedOneOfAndEmbeddedDiscriminatorJSONBody struct {
	Config *OneOfWithNestedOneOfAndEmbeddedDiscriminatorJSONBody_Config `json:"config,omitempty"`
}

// OneOfWithNestedOneOfAndEmbeddedDiscriminatorJSONBodyConfig2 defines parameters for OneOfWithNestedOneOfAndEmbeddedDiscriminator.
type OneOfWithNestedOneOfAndEmbeddedDiscriminatorJSONBodyConfig2 struct {
	union json.RawMessage
}

// OneOfWithNestedOneOfAndEmbeddedDiscriminatorJSONBody_Config defines parameters for OneOfWithNestedOneOfAndEmbeddedDiscriminator.
type OneOfWithNestedOneOfAndEmbeddedDiscriminatorJSONBody_Config struct {
	union json.RawMessage
}

// OneOfWithNestedAllOfAndTopLevelDiscriminatorJSONBody defines parameters for OneOfWithNestedAllOfAndTopLevelDiscriminator.
type OneOfWithNestedAllOfAndTopLevelDiscriminatorJSONBody struct {
	union json.RawMessage
}

// PotentiallyUndefinedFormDataJSONBody defines parameters for PotentiallyUndefinedFormData.
type PotentiallyUndefinedFormDataJSONBody struct {
	union json.RawMessage
}

// RedoclyQuirkJSONBody defines parameters for RedoclyQuirk.
type RedoclyQuirkJSONBody struct {
	// SomeOtherProperty Some other property that should render alongside the discriminated property
	SomeOtherProperty *string `json:"some_other_property,omitempty"`

	// Vehicle Vehicle (from [Redocly example](https://redocly.com/docs/resources/discriminator#when-to-use-the-openapi-discriminator))
	Vehicle *BaseVehicle `json:"vehicle,omitempty"`
}

// OneOfWithTopLevelDiscriminatorAndMappingJSONRequestBody defines body for OneOfWithTopLevelDiscriminatorAndMapping for application/json ContentType.
type OneOfWithTopLevelDiscriminatorAndMappingJSONRequestBody OneOfWithTopLevelDiscriminatorAndMappingJSONBody

// OneOfWithTopLevelDiscriminatorNoMappingJSONRequestBody defines body for OneOfWithTopLevelDiscriminatorNoMapping for application/json ContentType.
type OneOfWithTopLevelDiscriminatorNoMappingJSONRequestBody OneOfWithTopLevelDiscriminatorNoMappingJSONBody

// OneOfWithNestedAllOfAndEmbeddedDiscriminatorJSONRequestBody defines body for OneOfWithNestedAllOfAndEmbeddedDiscriminator for application/json ContentType.
type OneOfWithNestedAllOfAndEmbeddedDiscriminatorJSONRequestBody OneOfWithNestedAllOfAndEmbeddedDiscriminatorJSONBody

// OneOfWithImproperlyPlacedDiscriminatorJSONRequestBody defines body for OneOfWithImproperlyPlacedDiscriminator for application/json ContentType.
type OneOfWithImproperlyPlacedDiscriminatorJSONRequestBody OneOfWithImproperlyPlacedDiscriminatorJSONBody

// MappingOfSchemaNamesJSONRequestBody defines body for MappingOfSchemaNames for application/json ContentType.
type MappingOfSchemaNamesJSONRequestBody MappingOfSchemaNamesJSONBody

// MappingWithDuplicateSchemasJSONRequestBody defines body for MappingWithDuplicateSchemas for application/json ContentType.
type MappingWithDuplicateSchemasJSONRequestBody MappingWithDuplicateSchemasJSONBody

// OneOfWithNestedOneOfAndEmbeddedDiscriminatorJSONRequestBody defines body for OneOfWithNestedOneOfAndEmbeddedDiscriminator for application/json ContentType.
type OneOfWithNestedOneOfAndEmbeddedDiscriminatorJSONRequestBody OneOfWithNestedOneOfAndEmbeddedDiscriminatorJSONBody

// OneOfWithNestedAllOfAndTopLevelDiscriminatorJSONRequestBody defines body for OneOfWithNestedAllOfAndTopLevelDiscriminator for application/json ContentType.
type OneOfWithNestedAllOfAndTopLevelDiscriminatorJSONRequestBody OneOfWithNestedAllOfAndTopLevelDiscriminatorJSONBody

// PotentiallyUndefinedFormDataJSONRequestBody defines body for PotentiallyUndefinedFormData for application/json ContentType.
type PotentiallyUndefinedFormDataJSONRequestBody PotentiallyUndefinedFormDataJSONBody

// RedoclyQuirkJSONRequestBody defines body for RedoclyQuirk for application/json ContentType.
type RedoclyQuirkJSONRequestBody RedoclyQuirkJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// oneOf with discriminator and mapping
	// (PATCH /discriminator-with-mapping)
	OneOfWithTopLevelDiscriminatorAndMapping(w http.ResponseWriter, r *http.Request)
	// oneOf with top-level discriminator (no mapping)
	// (PATCH /discriminator-with-no-mapping)
	OneOfWithTopLevelDiscriminatorNoMapping(w http.ResponseWriter, r *http.Request)
	// oneOf request with a nested allOf and embedded discriminator
	// (PATCH /embedded-discriminator)
	OneOfWithNestedAllOfAndEmbeddedDiscriminator(w http.ResponseWriter, r *http.Request)
	// oneOf with a discriminator that is referencing a property up a level
	// (PATCH /improper-discriminator-placement)
	OneOfWithImproperlyPlacedDiscriminator(w http.ResponseWriter, r *http.Request)
	// Discriminator with a schema name mapping
	// (PATCH /mapping-of-schema-names)
	MappingOfSchemaNames(w http.ResponseWriter, r *http.Request)
	// Handle a schema with duplicate mapping schemas
	// (PATCH /mapping-with-duplicate-schemas)
	MappingWithDuplicateSchemas(w http.ResponseWriter, r *http.Request)
	// oneOf request with a nested oneOf, and embedded discriminator
	// (PATCH /nested-one-of-object-with-nested-one-of)
	OneOfWithNestedOneOfAndEmbeddedDiscriminator(w http.ResponseWriter, r *http.Request)
	// oneOf request with a nested allOf and top level discriminator
	// (PATCH /oneof-allof-top-level-disc)
	OneOfWithNestedAllOfAndTopLevelDiscriminator(w http.ResponseWriter, r *http.Request)
	// Handling for potentially undefined formData
	// (POST /potentially-undefined-formData)
	PotentiallyUndefinedFormData(w http.ResponseWriter, r *http.Request)
	// Discriminator without `anyOf` or `oneOf` that Redocly supports
	// (PATCH /redocly-flavored-discriminator)
	RedoclyQuirk(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// OneOfWithTopLevelDiscriminatorAndMapping operation middleware
func (siw *ServerInterfaceWrapper) OneOfWithTopLevelDiscriminatorAndMapping(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OneOfWithTopLevelDiscriminatorAndMapping(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// OneOfWithTopLevelDiscriminatorNoMapping operation middleware
func (siw *ServerInterfaceWrapper) OneOfWithTopLevelDiscriminatorNoMapping(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OneOfWithTopLevelDiscriminatorNoMapping(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// OneOfWithNestedAllOfAndEmbeddedDiscriminator operation middleware
func (siw *ServerInterfaceWrapper) OneOfWithNestedAllOfAndEmbeddedDiscriminator(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OneOfWithNestedAllOfAndEmbeddedDiscriminator(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// OneOfWithImproperlyPlacedDiscriminator operation middleware
func (siw *ServerInterfaceWrapper) OneOfWithImproperlyPlacedDiscriminator(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OneOfWithImproperlyPlacedDiscriminator(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// MappingOfSchemaNames operation middleware
func (siw *ServerInterfaceWrapper) MappingOfSchemaNames(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MappingOfSchemaNames(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// MappingWithDuplicateSchemas operation middleware
func (siw *ServerInterfaceWrapper) MappingWithDuplicateSchemas(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MappingWithDuplicateSchemas(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// OneOfWithNestedOneOfAndEmbeddedDiscriminator operation middleware
func (siw *ServerInterfaceWrapper) OneOfWithNestedOneOfAndEmbeddedDiscriminator(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OneOfWithNestedOneOfAndEmbeddedDiscriminator(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// OneOfWithNestedAllOfAndTopLevelDiscriminator operation middleware
func (siw *ServerInterfaceWrapper) OneOfWithNestedAllOfAndTopLevelDiscriminator(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OneOfWithNestedAllOfAndTopLevelDiscriminator(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PotentiallyUndefinedFormData operation middleware
func (siw *ServerInterfaceWrapper) PotentiallyUndefinedFormData(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PotentiallyUndefinedFormData(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RedoclyQuirk operation middleware
func (siw *ServerInterfaceWrapper) RedoclyQuirk(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RedoclyQuirk(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/discriminator-with-mapping", wrapper.OneOfWithTopLevelDiscriminatorAndMapping).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/discriminator-with-no-mapping", wrapper.OneOfWithTopLevelDiscriminatorNoMapping).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/embedded-discriminator", wrapper.OneOfWithNestedAllOfAndEmbeddedDiscriminator).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/improper-discriminator-placement", wrapper.OneOfWithImproperlyPlacedDiscriminator).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/mapping-of-schema-names", wrapper.MappingOfSchemaNames).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/mapping-with-duplicate-schemas", wrapper.MappingWithDuplicateSchemas).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/nested-one-of-object-with-nested-one-of", wrapper.OneOfWithNestedOneOfAndEmbeddedDiscriminator).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/oneof-allof-top-level-disc", wrapper.OneOfWithNestedAllOfAndTopLevelDiscriminator).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/potentially-undefined-formData", wrapper.PotentiallyUndefinedFormData).Methods("POST")

	r.HandleFunc(options.BaseURL+"/redocly-flavored-discriminator", wrapper.RedoclyQuirk).Methods("PATCH")

	return r
}

type OneOfWithTopLevelDiscriminatorAndMappingRequestObject struct {
	Body *OneOfWithTopLevelDiscriminatorAndMappingJSONRequestBody
}

type OneOfWithTopLevelDiscriminatorAndMappingResponseObject interface {
	VisitOneOfWithTopLevelDiscriminatorAndMappingResponse(w http.ResponseWriter) error
}

type OneOfWithTopLevelDiscriminatorAndMapping200Response struct {
}

func (response OneOfWithTopLevelDiscriminatorAndMapping200Response) VisitOneOfWithTopLevelDiscriminatorAndMappingResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type OneOfWithTopLevelDiscriminatorNoMappingRequestObject struct {
	Body *OneOfWithTopLevelDiscriminatorNoMappingJSONRequestBody
}

type OneOfWithTopLevelDiscriminatorNoMappingResponseObject interface {
	VisitOneOfWithTopLevelDiscriminatorNoMappingResponse(w http.ResponseWriter) error
}

type OneOfWithTopLevelDiscriminatorNoMapping200Response struct {
}

func (response OneOfWithTopLevelDiscriminatorNoMapping200Response) VisitOneOfWithTopLevelDiscriminatorNoMappingResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type OneOfWithNestedAllOfAndEmbeddedDiscriminatorRequestObject struct {
	Body *OneOfWithNestedAllOfAndEmbeddedDiscriminatorJSONRequestBody
}

type OneOfWithNestedAllOfAndEmbeddedDiscriminatorResponseObject interface {
	VisitOneOfWithNestedAllOfAndEmbeddedDiscriminatorResponse(w http.ResponseWriter) error
}

type OneOfWithNestedAllOfAndEmbeddedDiscriminator200Response struct {
}

func (response OneOfWithNestedAllOfAndEmbeddedDiscriminator200Response) VisitOneOfWithNestedAllOfAndEmbeddedDiscriminatorResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type OneOfWithImproperlyPlacedDiscriminatorRequestObject struct {
	Body *OneOfWithImproperlyPlacedDiscriminatorJSONRequestBody
}

type OneOfWithImproperlyPlacedDiscriminatorResponseObject interface {
	VisitOneOfWithImproperlyPlacedDiscriminatorResponse(w http.ResponseWriter) error
}

type OneOfWithImproperlyPlacedDiscriminator200Response struct {
}

func (response OneOfWithImproperlyPlacedDiscriminator200Response) VisitOneOfWithImproperlyPlacedDiscriminatorResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type MappingOfSchemaNamesRequestObject struct {
	Body *MappingOfSchemaNamesJSONRequestBody
}

type MappingOfSchemaNamesResponseObject interface {
	VisitMappingOfSchemaNamesResponse(w http.ResponseWriter) error
}

type MappingOfSchemaNames200Response struct {
}

func (response MappingOfSchemaNames200Response) VisitMappingOfSchemaNamesResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type MappingWithDuplicateSchemasRequestObject struct {
	Body *MappingWithDuplicateSchemasJSONRequestBody
}

type MappingWithDuplicateSchemasResponseObject interface {
	VisitMappingWithDuplicateSchemasResponse(w http.ResponseWriter) error
}

type MappingWithDuplicateSchemas201Response struct {
}

func (response MappingWithDuplicateSchemas201Response) VisitMappingWithDuplicateSchemasResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type OneOfWithNestedOneOfAndEmbeddedDiscriminatorRequestObject struct {
	Body *OneOfWithNestedOneOfAndEmbeddedDiscriminatorJSONRequestBody
}

type OneOfWithNestedOneOfAndEmbeddedDiscriminatorResponseObject interface {
	VisitOneOfWithNestedOneOfAndEmbeddedDiscriminatorResponse(w http.ResponseWriter) error
}

type OneOfWithNestedOneOfAndEmbeddedDiscriminator200Response struct {
}

func (response OneOfWithNestedOneOfAndEmbeddedDiscriminator200Response) VisitOneOfWithNestedOneOfAndEmbeddedDiscriminatorResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type OneOfWithNestedAllOfAndTopLevelDiscriminatorRequestObject struct {
	Body *OneOfWithNestedAllOfAndTopLevelDiscriminatorJSONRequestBody
}

type OneOfWithNestedAllOfAndTopLevelDiscriminatorResponseObject interface {
	VisitOneOfWithNestedAllOfAndTopLevelDiscriminatorResponse(w http.ResponseWriter) error
}

type OneOfWithNestedAllOfAndTopLevelDiscriminator200Response struct {
}

func (response OneOfWithNestedAllOfAndTopLevelDiscriminator200Response) VisitOneOfWithNestedAllOfAndTopLevelDiscriminatorResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PotentiallyUndefinedFormDataRequestObject struct {
	Body *PotentiallyUndefinedFormDataJSONRequestBody
}

type PotentiallyUndefinedFormDataResponseObject interface {
	VisitPotentiallyUndefinedFormDataResponse(w http.ResponseWriter) error
}

type PotentiallyUndefinedFormData200Response struct {
}

func (response PotentiallyUndefinedFormData200Response) VisitPotentiallyUndefinedFormDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RedoclyQuirkRequestObject struct {
	Body *RedoclyQuirkJSONRequestBody
}

type RedoclyQuirkResponseObject interface {
	VisitRedoclyQuirkResponse(w http.ResponseWriter) error
}

type RedoclyQuirk200Response struct {
}

func (response RedoclyQuirk200Response) VisitRedoclyQuirkResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// oneOf with discriminator and mapping
	// (PATCH /discriminator-with-mapping)
	OneOfWithTopLevelDiscriminatorAndMapping(ctx context.Context, request OneOfWithTopLevelDiscriminatorAndMappingRequestObject) (OneOfWithTopLevelDiscriminatorAndMappingResponseObject, error)
	// oneOf with top-level discriminator (no mapping)
	// (PATCH /discriminator-with-no-mapping)
	OneOfWithTopLevelDiscriminatorNoMapping(ctx context.Context, request OneOfWithTopLevelDiscriminatorNoMappingRequestObject) (OneOfWithTopLevelDiscriminatorNoMappingResponseObject, error)
	// oneOf request with a nested allOf and embedded discriminator
	// (PATCH /embedded-discriminator)
	OneOfWithNestedAllOfAndEmbeddedDiscriminator(ctx context.Context, request OneOfWithNestedAllOfAndEmbeddedDiscriminatorRequestObject) (OneOfWithNestedAllOfAndEmbeddedDiscriminatorResponseObject, error)
	// oneOf with a discriminator that is referencing a property up a level
	// (PATCH /improper-discriminator-placement)
	OneOfWithImproperlyPlacedDiscriminator(ctx context.Context, request OneOfWithImproperlyPlacedDiscriminatorRequestObject) (OneOfWithImproperlyPlacedDiscriminatorResponseObject, error)
	// Discriminator with a schema name mapping
	// (PATCH /mapping-of-schema-names)
	MappingOfSchemaNames(ctx context.Context, request MappingOfSchemaNamesRequestObject) (MappingOfSchemaNamesResponseObject, error)
	// Handle a schema with duplicate mapping schemas
	// (PATCH /mapping-with-duplicate-schemas)
	MappingWithDuplicateSchemas(ctx context.Context, request MappingWithDuplicateSchemasRequestObject) (MappingWithDuplicateSchemasResponseObject, error)
	// oneOf request with a nested oneOf, and embedded discriminator
	// (PATCH /nested-one-of-object-with-nested-one-of)
	OneOfWithNestedOneOfAndEmbeddedDiscriminator(ctx context.Context, request OneOfWithNestedOneOfAndEmbeddedDiscriminatorRequestObject) (OneOfWithNestedOneOfAndEmbeddedDiscriminatorResponseObject, error)
	// oneOf request with a nested allOf and top level discriminator
	// (PATCH /oneof-allof-top-level-disc)
	OneOfWithNestedAllOfAndTopLevelDiscriminator(ctx context.Context, request OneOfWithNestedAllOfAndTopLevelDiscriminatorRequestObject) (OneOfWithNestedAllOfAndTopLevelDiscriminatorResponseObject, error)
	// Handling for potentially undefined formData
	// (POST /potentially-undefined-formData)
	PotentiallyUndefinedFormData(ctx context.Context, request PotentiallyUndefinedFormDataRequestObject) (PotentiallyUndefinedFormDataResponseObject, error)
	// Discriminator without `anyOf` or `oneOf` that Redocly supports
	// (PATCH /redocly-flavored-discriminator)
	RedoclyQuirk(ctx context.Context, request RedoclyQuirkRequestObject) (RedoclyQuirkResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// OneOfWithTopLevelDiscriminatorAndMapping operation middleware
func (sh *strictHandler) OneOfWithTopLevelDiscriminatorAndMapping(w http.ResponseWriter, r *http.Request) {
	var request OneOfWithTopLevelDiscriminatorAndMappingRequestObject

	var body OneOfWithTopLevelDiscriminatorAndMappingJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OneOfWithTopLevelDiscriminatorAndMapping(ctx, request.(OneOfWithTopLevelDiscriminatorAndMappingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OneOfWithTopLevelDiscriminatorAndMapping")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OneOfWithTopLevelDiscriminatorAndMappingResponseObject); ok {
		if err := validResponse.VisitOneOfWithTopLevelDiscriminatorAndMappingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OneOfWithTopLevelDiscriminatorNoMapping operation middleware
func (sh *strictHandler) OneOfWithTopLevelDiscriminatorNoMapping(w http.ResponseWriter, r *http.Request) {
	var request OneOfWithTopLevelDiscriminatorNoMappingRequestObject

	var body OneOfWithTopLevelDiscriminatorNoMappingJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OneOfWithTopLevelDiscriminatorNoMapping(ctx, request.(OneOfWithTopLevelDiscriminatorNoMappingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OneOfWithTopLevelDiscriminatorNoMapping")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OneOfWithTopLevelDiscriminatorNoMappingResponseObject); ok {
		if err := validResponse.VisitOneOfWithTopLevelDiscriminatorNoMappingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OneOfWithNestedAllOfAndEmbeddedDiscriminator operation middleware
func (sh *strictHandler) OneOfWithNestedAllOfAndEmbeddedDiscriminator(w http.ResponseWriter, r *http.Request) {
	var request OneOfWithNestedAllOfAndEmbeddedDiscriminatorRequestObject

	var body OneOfWithNestedAllOfAndEmbeddedDiscriminatorJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OneOfWithNestedAllOfAndEmbeddedDiscriminator(ctx, request.(OneOfWithNestedAllOfAndEmbeddedDiscriminatorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OneOfWithNestedAllOfAndEmbeddedDiscriminator")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OneOfWithNestedAllOfAndEmbeddedDiscriminatorResponseObject); ok {
		if err := validResponse.VisitOneOfWithNestedAllOfAndEmbeddedDiscriminatorResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OneOfWithImproperlyPlacedDiscriminator operation middleware
func (sh *strictHandler) OneOfWithImproperlyPlacedDiscriminator(w http.ResponseWriter, r *http.Request) {
	var request OneOfWithImproperlyPlacedDiscriminatorRequestObject

	var body OneOfWithImproperlyPlacedDiscriminatorJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OneOfWithImproperlyPlacedDiscriminator(ctx, request.(OneOfWithImproperlyPlacedDiscriminatorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OneOfWithImproperlyPlacedDiscriminator")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OneOfWithImproperlyPlacedDiscriminatorResponseObject); ok {
		if err := validResponse.VisitOneOfWithImproperlyPlacedDiscriminatorResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// MappingOfSchemaNames operation middleware
func (sh *strictHandler) MappingOfSchemaNames(w http.ResponseWriter, r *http.Request) {
	var request MappingOfSchemaNamesRequestObject

	var body MappingOfSchemaNamesJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.MappingOfSchemaNames(ctx, request.(MappingOfSchemaNamesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MappingOfSchemaNames")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(MappingOfSchemaNamesResponseObject); ok {
		if err := validResponse.VisitMappingOfSchemaNamesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// MappingWithDuplicateSchemas operation middleware
func (sh *strictHandler) MappingWithDuplicateSchemas(w http.ResponseWriter, r *http.Request) {
	var request MappingWithDuplicateSchemasRequestObject

	var body MappingWithDuplicateSchemasJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.MappingWithDuplicateSchemas(ctx, request.(MappingWithDuplicateSchemasRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MappingWithDuplicateSchemas")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(MappingWithDuplicateSchemasResponseObject); ok {
		if err := validResponse.VisitMappingWithDuplicateSchemasResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OneOfWithNestedOneOfAndEmbeddedDiscriminator operation middleware
func (sh *strictHandler) OneOfWithNestedOneOfAndEmbeddedDiscriminator(w http.ResponseWriter, r *http.Request) {
	var request OneOfWithNestedOneOfAndEmbeddedDiscriminatorRequestObject

	var body OneOfWithNestedOneOfAndEmbeddedDiscriminatorJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OneOfWithNestedOneOfAndEmbeddedDiscriminator(ctx, request.(OneOfWithNestedOneOfAndEmbeddedDiscriminatorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OneOfWithNestedOneOfAndEmbeddedDiscriminator")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OneOfWithNestedOneOfAndEmbeddedDiscriminatorResponseObject); ok {
		if err := validResponse.VisitOneOfWithNestedOneOfAndEmbeddedDiscriminatorResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OneOfWithNestedAllOfAndTopLevelDiscriminator operation middleware
func (sh *strictHandler) OneOfWithNestedAllOfAndTopLevelDiscriminator(w http.ResponseWriter, r *http.Request) {
	var request OneOfWithNestedAllOfAndTopLevelDiscriminatorRequestObject

	var body OneOfWithNestedAllOfAndTopLevelDiscriminatorJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OneOfWithNestedAllOfAndTopLevelDiscriminator(ctx, request.(OneOfWithNestedAllOfAndTopLevelDiscriminatorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OneOfWithNestedAllOfAndTopLevelDiscriminator")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OneOfWithNestedAllOfAndTopLevelDiscriminatorResponseObject); ok {
		if err := validResponse.VisitOneOfWithNestedAllOfAndTopLevelDiscriminatorResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PotentiallyUndefinedFormData operation middleware
func (sh *strictHandler) PotentiallyUndefinedFormData(w http.ResponseWriter, r *http.Request) {
	var request PotentiallyUndefinedFormDataRequestObject

	var body PotentiallyUndefinedFormDataJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PotentiallyUndefinedFormData(ctx, request.(PotentiallyUndefinedFormDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PotentiallyUndefinedFormData")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PotentiallyUndefinedFormDataResponseObject); ok {
		if err := validResponse.VisitPotentiallyUndefinedFormDataResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RedoclyQuirk operation middleware
func (sh *strictHandler) RedoclyQuirk(w http.ResponseWriter, r *http.Request) {
	var request RedoclyQuirkRequestObject

	var body RedoclyQuirkJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RedoclyQuirk(ctx, request.(RedoclyQuirkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RedoclyQuirk")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RedoclyQuirkResponseObject); ok {
		if err := validResponse.VisitRedoclyQuirkResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
