// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package client

import (
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
)

const (
	ApiKey_cookieScopes            = "apiKey_cookie.Scopes"
	ApiKey_headerScopes            = "apiKey_header.Scopes"
	ApiKey_queryScopes             = "apiKey_query.Scopes"
	BasicScopes                    = "basic.Scopes"
	BearerScopes                   = "bearer.Scopes"
	Bearer_jwtScopes               = "bearer_jwt.Scopes"
	Oauth2Scopes                   = "oauth2.Scopes"
	Oauth2_authorizationCodeScopes = "oauth2_authorizationCode.Scopes"
	Oauth2_clientCredentialsScopes = "oauth2_clientCredentials.Scopes"
	Oauth2_implicitScopes          = "oauth2_implicit.Scopes"
	Oauth2_passwordScopes          = "oauth2_password.Scopes"
	OpenIdConnectScopes            = "openIdConnect.Scopes"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ApiKey request
	ApiKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Cookie request
	Cookie(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Header request
	Header(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Basic request
	Basic(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Bearer request
	Bearer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BearerJwt request
	BearerJwt(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NoAuthentication request
	NoAuthentication(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GeneralSupport request
	GeneralSupport(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GeneralSupportAuthorizationCode request
	GeneralSupportAuthorizationCode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GeneralSupportImplicit request
	GeneralSupportImplicit(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GeneralSupportAll request
	GeneralSupportAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GeneralSupportClientCredentials request
	GeneralSupportClientCredentials(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OpenIdConnect request
	OpenIdConnect(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionalAuthentication request
	OptionalAuthentication(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ForcedInvalidAuthentication request
	ForcedInvalidAuthentication(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ApiKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiKeyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Cookie(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCookieRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Header(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeaderRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Basic(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBasicRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Bearer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBearerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BearerJwt(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBearerJwtRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoAuthentication(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoAuthenticationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GeneralSupport(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGeneralSupportRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GeneralSupportAuthorizationCode(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGeneralSupportAuthorizationCodeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GeneralSupportImplicit(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGeneralSupportImplicitRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GeneralSupportAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGeneralSupportAllRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GeneralSupportClientCredentials(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGeneralSupportClientCredentialsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OpenIdConnect(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOpenIdConnectRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionalAuthentication(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionalAuthenticationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ForcedInvalidAuthentication(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewForcedInvalidAuthenticationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewApiKeyRequest generates requests for ApiKey
func NewApiKeyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anything/apikey")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCookieRequest generates requests for Cookie
func NewCookieRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anything/apikey")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHeaderRequest generates requests for Header
func NewHeaderRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anything/apikey")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBasicRequest generates requests for Basic
func NewBasicRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anything/basic")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBearerRequest generates requests for Bearer
func NewBearerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anything/bearer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBearerJwtRequest generates requests for BearerJwt
func NewBearerJwtRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anything/bearer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNoAuthenticationRequest generates requests for NoAuthentication
func NewNoAuthenticationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anything/no-auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGeneralSupportRequest generates requests for GeneralSupport
func NewGeneralSupportRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anything/oauth2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGeneralSupportAuthorizationCodeRequest generates requests for GeneralSupportAuthorizationCode
func NewGeneralSupportAuthorizationCodeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anything/oauth2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGeneralSupportImplicitRequest generates requests for GeneralSupportImplicit
func NewGeneralSupportImplicitRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anything/oauth2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGeneralSupportAllRequest generates requests for GeneralSupportAll
func NewGeneralSupportAllRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anything/oauth2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGeneralSupportClientCredentialsRequest generates requests for GeneralSupportClientCredentials
func NewGeneralSupportClientCredentialsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anything/oauth2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOpenIdConnectRequest generates requests for OpenIdConnect
func NewOpenIdConnectRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anything/open-id-connect")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionalAuthenticationRequest generates requests for OptionalAuthentication
func NewOptionalAuthenticationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anything/optional-auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewForcedInvalidAuthenticationRequest generates requests for ForcedInvalidAuthentication
func NewForcedInvalidAuthenticationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/401")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ApiKeyWithResponse request
	ApiKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiKeyResponse, error)

	// CookieWithResponse request
	CookieWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CookieResponse, error)

	// HeaderWithResponse request
	HeaderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HeaderResponse, error)

	// BasicWithResponse request
	BasicWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BasicResponse, error)

	// BearerWithResponse request
	BearerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BearerResponse, error)

	// BearerJwtWithResponse request
	BearerJwtWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BearerJwtResponse, error)

	// NoAuthenticationWithResponse request
	NoAuthenticationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NoAuthenticationResponse, error)

	// GeneralSupportWithResponse request
	GeneralSupportWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GeneralSupportResponse, error)

	// GeneralSupportAuthorizationCodeWithResponse request
	GeneralSupportAuthorizationCodeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GeneralSupportAuthorizationCodeResponse, error)

	// GeneralSupportImplicitWithResponse request
	GeneralSupportImplicitWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GeneralSupportImplicitResponse, error)

	// GeneralSupportAllWithResponse request
	GeneralSupportAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GeneralSupportAllResponse, error)

	// GeneralSupportClientCredentialsWithResponse request
	GeneralSupportClientCredentialsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GeneralSupportClientCredentialsResponse, error)

	// OpenIdConnectWithResponse request
	OpenIdConnectWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OpenIdConnectResponse, error)

	// OptionalAuthenticationWithResponse request
	OptionalAuthenticationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionalAuthenticationResponse, error)

	// ForcedInvalidAuthenticationWithResponse request
	ForcedInvalidAuthenticationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ForcedInvalidAuthenticationResponse, error)
}

type ApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CookieResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CookieResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CookieResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeaderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HeaderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeaderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BasicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BasicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BasicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BearerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BearerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BearerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BearerJwtResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BearerJwtResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BearerJwtResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NoAuthenticationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r NoAuthenticationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NoAuthenticationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GeneralSupportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GeneralSupportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GeneralSupportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GeneralSupportAuthorizationCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GeneralSupportAuthorizationCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GeneralSupportAuthorizationCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GeneralSupportImplicitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GeneralSupportImplicitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GeneralSupportImplicitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GeneralSupportAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GeneralSupportAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GeneralSupportAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GeneralSupportClientCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GeneralSupportClientCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GeneralSupportClientCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OpenIdConnectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OpenIdConnectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OpenIdConnectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionalAuthenticationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OptionalAuthenticationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionalAuthenticationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ForcedInvalidAuthenticationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ForcedInvalidAuthenticationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ForcedInvalidAuthenticationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ApiKeyWithResponse request returning *ApiKeyResponse
func (c *ClientWithResponses) ApiKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiKeyResponse, error) {
	rsp, err := c.ApiKey(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiKeyResponse(rsp)
}

// CookieWithResponse request returning *CookieResponse
func (c *ClientWithResponses) CookieWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CookieResponse, error) {
	rsp, err := c.Cookie(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCookieResponse(rsp)
}

// HeaderWithResponse request returning *HeaderResponse
func (c *ClientWithResponses) HeaderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HeaderResponse, error) {
	rsp, err := c.Header(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeaderResponse(rsp)
}

// BasicWithResponse request returning *BasicResponse
func (c *ClientWithResponses) BasicWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BasicResponse, error) {
	rsp, err := c.Basic(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBasicResponse(rsp)
}

// BearerWithResponse request returning *BearerResponse
func (c *ClientWithResponses) BearerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BearerResponse, error) {
	rsp, err := c.Bearer(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBearerResponse(rsp)
}

// BearerJwtWithResponse request returning *BearerJwtResponse
func (c *ClientWithResponses) BearerJwtWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BearerJwtResponse, error) {
	rsp, err := c.BearerJwt(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBearerJwtResponse(rsp)
}

// NoAuthenticationWithResponse request returning *NoAuthenticationResponse
func (c *ClientWithResponses) NoAuthenticationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NoAuthenticationResponse, error) {
	rsp, err := c.NoAuthentication(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoAuthenticationResponse(rsp)
}

// GeneralSupportWithResponse request returning *GeneralSupportResponse
func (c *ClientWithResponses) GeneralSupportWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GeneralSupportResponse, error) {
	rsp, err := c.GeneralSupport(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGeneralSupportResponse(rsp)
}

// GeneralSupportAuthorizationCodeWithResponse request returning *GeneralSupportAuthorizationCodeResponse
func (c *ClientWithResponses) GeneralSupportAuthorizationCodeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GeneralSupportAuthorizationCodeResponse, error) {
	rsp, err := c.GeneralSupportAuthorizationCode(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGeneralSupportAuthorizationCodeResponse(rsp)
}

// GeneralSupportImplicitWithResponse request returning *GeneralSupportImplicitResponse
func (c *ClientWithResponses) GeneralSupportImplicitWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GeneralSupportImplicitResponse, error) {
	rsp, err := c.GeneralSupportImplicit(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGeneralSupportImplicitResponse(rsp)
}

// GeneralSupportAllWithResponse request returning *GeneralSupportAllResponse
func (c *ClientWithResponses) GeneralSupportAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GeneralSupportAllResponse, error) {
	rsp, err := c.GeneralSupportAll(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGeneralSupportAllResponse(rsp)
}

// GeneralSupportClientCredentialsWithResponse request returning *GeneralSupportClientCredentialsResponse
func (c *ClientWithResponses) GeneralSupportClientCredentialsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GeneralSupportClientCredentialsResponse, error) {
	rsp, err := c.GeneralSupportClientCredentials(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGeneralSupportClientCredentialsResponse(rsp)
}

// OpenIdConnectWithResponse request returning *OpenIdConnectResponse
func (c *ClientWithResponses) OpenIdConnectWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OpenIdConnectResponse, error) {
	rsp, err := c.OpenIdConnect(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOpenIdConnectResponse(rsp)
}

// OptionalAuthenticationWithResponse request returning *OptionalAuthenticationResponse
func (c *ClientWithResponses) OptionalAuthenticationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionalAuthenticationResponse, error) {
	rsp, err := c.OptionalAuthentication(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionalAuthenticationResponse(rsp)
}

// ForcedInvalidAuthenticationWithResponse request returning *ForcedInvalidAuthenticationResponse
func (c *ClientWithResponses) ForcedInvalidAuthenticationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ForcedInvalidAuthenticationResponse, error) {
	rsp, err := c.ForcedInvalidAuthentication(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseForcedInvalidAuthenticationResponse(rsp)
}

// ParseApiKeyResponse parses an HTTP response from a ApiKeyWithResponse call
func ParseApiKeyResponse(rsp *http.Response) (*ApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCookieResponse parses an HTTP response from a CookieWithResponse call
func ParseCookieResponse(rsp *http.Response) (*CookieResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CookieResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseHeaderResponse parses an HTTP response from a HeaderWithResponse call
func ParseHeaderResponse(rsp *http.Response) (*HeaderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeaderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBasicResponse parses an HTTP response from a BasicWithResponse call
func ParseBasicResponse(rsp *http.Response) (*BasicResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BasicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBearerResponse parses an HTTP response from a BearerWithResponse call
func ParseBearerResponse(rsp *http.Response) (*BearerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BearerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBearerJwtResponse parses an HTTP response from a BearerJwtWithResponse call
func ParseBearerJwtResponse(rsp *http.Response) (*BearerJwtResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BearerJwtResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseNoAuthenticationResponse parses an HTTP response from a NoAuthenticationWithResponse call
func ParseNoAuthenticationResponse(rsp *http.Response) (*NoAuthenticationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NoAuthenticationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGeneralSupportResponse parses an HTTP response from a GeneralSupportWithResponse call
func ParseGeneralSupportResponse(rsp *http.Response) (*GeneralSupportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GeneralSupportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGeneralSupportAuthorizationCodeResponse parses an HTTP response from a GeneralSupportAuthorizationCodeWithResponse call
func ParseGeneralSupportAuthorizationCodeResponse(rsp *http.Response) (*GeneralSupportAuthorizationCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GeneralSupportAuthorizationCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGeneralSupportImplicitResponse parses an HTTP response from a GeneralSupportImplicitWithResponse call
func ParseGeneralSupportImplicitResponse(rsp *http.Response) (*GeneralSupportImplicitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GeneralSupportImplicitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGeneralSupportAllResponse parses an HTTP response from a GeneralSupportAllWithResponse call
func ParseGeneralSupportAllResponse(rsp *http.Response) (*GeneralSupportAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GeneralSupportAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGeneralSupportClientCredentialsResponse parses an HTTP response from a GeneralSupportClientCredentialsWithResponse call
func ParseGeneralSupportClientCredentialsResponse(rsp *http.Response) (*GeneralSupportClientCredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GeneralSupportClientCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOpenIdConnectResponse parses an HTTP response from a OpenIdConnectWithResponse call
func ParseOpenIdConnectResponse(rsp *http.Response) (*OpenIdConnectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OpenIdConnectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOptionalAuthenticationResponse parses an HTTP response from a OptionalAuthenticationWithResponse call
func ParseOptionalAuthenticationResponse(rsp *http.Response) (*OptionalAuthenticationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionalAuthenticationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseForcedInvalidAuthenticationResponse parses an HTTP response from a ForcedInvalidAuthenticationWithResponse call
func ParseForcedInvalidAuthenticationResponse(rsp *http.Response) (*ForcedInvalidAuthenticationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ForcedInvalidAuthenticationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
