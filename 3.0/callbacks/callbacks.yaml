openapi: 3.0.0
tags:
- name: streamstag
  description: All endpoints related to streams
servers:
- url: https://development.gigantic-server.com/v1
  description: Development server
info:
  description: Callbacks example
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
  title: Callbacks Example
  version: 1.0.0
  license:
    name: "MIT"
    url: https://opensource.org/licenses/MIT
paths:
  '/streams':
    post:
      summary: receive out-of-band data
      tags:
      - streamstag
      operationId: streamsoid
      description: subscribes a client to receive out-of-band data
      parameters:
        - name: callbackUrl
          in: query
          required: true
          description: the location where data will be sent. Must be network accessible
            by the source server
          schema:
            type: string
            format: uri
            example: https://tonys-server.com
      responses:
        '201':
          description: subscription successfully created
          content:
            application/json:
              example:
                subscriptionId: 2531329f-fb09-4ef7-887e-84e648214436
              schema:
                description: subscription information
                required:
                  - subscriptionId
                properties:
                  subscriptionId:
                    description: this unique identifier allows management of the subscription
                    type: string
                    example: 2531329f-fb09-4ef7-887e-84e648214436
        '429':
          description: We're super busy right now, please wait.  
      callbacks:
        onData:
          '{$request.query.callbackUrl}/data':
            post:
              requestBody:
                description: subscription payload
                content:
                  application/json:
                    example:
                      {
                        "timestamp": "2018-03-20t09:12:28z"
                      }
                    schema:
                      type: object
                      properties:
                        timestamp:
                          example: 2018-03-20t09:12:28z
                          type: string
                          format: date-time
                        userData:
                          type: string
                          example: userdata
              responses:
                '202':
                  description: Your server implementation should return this HTTP
                    status code if the data was received successfully
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          User:
                            example:
                              name: Jane Doe
                              email: jane.doe@example.com
                            type: object
                            properties:
                              email:
                                type: string
                                example: jane.doe@example.com
                              name:
                                type: string
                                example: Jane Doe
                      examples:
                        user:
                          value:
                            user:
                              email: test@example.com
                              name: Test user name
                '204':
                  description: Your server should return this HTTP status code if
                    no longer interested in further updates
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          email:
                            type: string
                            example: john.doe@example.com
                          name:
                            type: string
                            example: John Doe
                          id:
                            type: integer
                            format: int64
                            example: 123456789
                      example:
                        id: 12345
                        email: test@example.com
                        name: Test user name
